OBJECT Codeunit 9170 Conf./Personalization Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=29-09-16;
    Time=12:00:00;
    Version List=NAVW19.00.00.47042;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            InitializeProfiles;
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'DAN=Alle konfigurationsændringer af denne profil vil blive slettet. Vil du fortsætte?;ENU=This will delete all configuration changes made for this profile.  Do you want to continue?';
      Text002@1001 : TextConst 'DAN=Alle tilpasningsændringer foretaget af denne bruger vil blive slettet. Vil du fortsætte?;ENU=This will delete all personalization changes made by this user.  Do you want to continue?';
      Text003@1044 : TextConst 'DAN=Du kan ikke slette en profil med standardrollecenter.;ENU=You cannot delete a profile with default Role Center.';
      Text004@1043 : TextConst 'DAN=Regnskabschef;ENU=Accounting Manager';
      Text005@1042 : TextConst 'DAN=Regnskabschef;ENU=Accounting Manager';
      Text006@1041 : TextConst 'DAN=Leverandørkoordinator;ENU=AP Coordinator';
      Text007@1040 : TextConst 'DAN=Leverandørkoordinator;ENU=Accounts Payable Coordinator';
      Text008@1039 : TextConst 'DAN=Admin. af tilgodehavender;ENU=AR Administrator';
      Text009@1038 : TextConst 'DAN=Administrator af tilgodehavender;ENU=Accounts Receivable Administrator';
      Text010@1037 : TextConst 'DAN=Bogholder;ENU=Bookkeeper';
      Text011@1036 : TextConst 'DAN=Bogholder;ENU=Bookkeeper';
      Text012@1035 : TextConst 'DAN=Salgschef;ENU=Sales Manager';
      Text013@1034 : TextConst 'DAN=Salgschef;ENU=Sales Manager';
      Text014@1033 : TextConst 'DAN=Ordrebehandler;ENU=Order Processor';
      Text015@1032 : TextConst 'DAN="Salgsordrebehandler ";ENU="Sales Order Processor "';
      Text016@1031 : TextConst 'DAN=Indkøbsagent;ENU=Purchasing Agent';
      Text017@1030 : TextConst 'DAN=Indkøbsagent;ENU=Purchasing Agent';
      Text018@1029 : TextConst 'DAN=Forsend./modtagelse - logistik;ENU=Shipping and Receiving - WMS';
      Text019@1028 : TextConst 'DAN=Forsendelse og modtagelse - logistik;ENU=Shipping and Receiving - Warehouse Management System';
      Text020@1027 : TextConst 'DAN=Forsendelse og modtagelse;ENU=Shipping and Receiving';
      Text021@1026 : TextConst 'DAN=Forsendelse og modtagelse - ordre-til-ordre;ENU=Shipping and Receiving - Order-by-Order';
      Text022@1025 : TextConst 'DAN=Lagermedarbejder - logistik;ENU=Warehouse Worker - WMS';
      Text023@1024 : TextConst 'DAN=Lagermedarbejder - logistik;ENU=Warehouse Worker - Warehouse Management System';
      Text024@1023 : TextConst 'DAN=Produktionsplanlægger;ENU=Production Planner';
      Text025@1022 : TextConst 'DAN=Produktionsplanlægger;ENU=Production Planner';
      Text026@1021 : TextConst 'DAN=Tilsynsførende;ENU=Shop Supervisor';
      Text027@1020 : TextConst 'DAN=Tilsynsførende - omfattende produktion;ENU=Shop Supervisor - Manufacturing Comprehensive';
      Text028@1019 : TextConst 'DAN=Tilsynsførende - Fond;ENU=Shop Supervisor - Foundation';
      Text029@1018 : TextConst 'DAN=Tilsynsførende - produktionsfond;ENU=Shop Supervisor - Manufacturing Foundation';
      Text030@1017 : TextConst 'DAN=Maskinoperatør;ENU=Machine Operator';
      Text031@1016 : TextConst 'DAN=Maskinoperatør - omfattende produktion;ENU=Machine Operator - Manufacturing Comprehensive';
      Text032@1015 : TextConst 'DAN=Personalechef;ENU=Resource Manager';
      Text033@1014 : TextConst 'DAN=Personalechef;ENU=Resource Manager';
      Text034@1013 : TextConst 'DAN=Projektleder;ENU=Project Manager';
      Text035@1012 : TextConst 'DAN=Projektleder;ENU=Project Manager';
      Text036@1011 : TextConst 'DAN=Sender;ENU=Dispatcher';
      Text037@1010 : TextConst 'DAN=Sender - kundeservice;ENU=Dispatcher - Customer Service';
      Text038@1009 : TextConst 'DAN=Ekstern tekniker;ENU=Outbound Technician';
      Text039@1008 : TextConst 'DAN=Ekstern tekniker - service;ENU=Outbound Technician - Customer Service';
      Text040@1007 : TextConst 'DAN=It-chef;ENU=IT Manager';
      Text041@1006 : TextConst 'DAN=It-chef;ENU=IT Manager';
      Text042@1005 : TextConst 'DAN=Administrerende direktør;ENU=President';
      Text043@1004 : TextConst 'DAN="Administrerende direktør ";ENU="President "';
      Text044@1003 : TextConst 'DAN=Adm. dir. - mindre virksomhed;ENU=President - Small Business';
      Text045@1002 : TextConst 'DAN=Adm. dir. - mindre virksomhed;ENU=President - Small Business';
      Text046@1045 : TextConst 'DAN=RAPIDSTART SERVICES;ENU=RapidStart Services';
      Text047@1046 : TextConst 'DAN=RapidStart Services Implementer;ENU=RapidStart Services Implementer';
      SmallBusinessIDTxt@1085 : TextConst 'DAN=Mindre virksomhed;ENU=Small Business';
      SmallBusinessDescriptionTxt@1086 : TextConst 'DAN=Mindre virksomhed;ENU=Small Business';
      CannotDeleteDefaultUserProfileErr@1047 : TextConst 'DAN=Du kan ikke slette denne profil, da den er konfigureret som en standardprofil for en eller flere brugere.;ENU=You cannot delete this profile because it is set up as a default profile for one or more users.';
      XMLDOMManagement@1067 : Codeunit 6224;
      RegEx@1056 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      CultureInfo@1054 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      Convert@1053 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      InstalledLanguages@1098 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
      DetectedLanguages@1055 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
      InfoForCompletionMessage@1091 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.StringCollection";
      CurrentProfileID@1050 : Code[30];
      CurrentProfileDescription@1079 : Text[250];
      CurrentPageID@1049 : Integer;
      CurrentPersonalizationID@1048 : Code[40];
      ProfileResxFileNotFoundTxt@1060 : TextConst '@@@=Tells the user that translated UI strings for a profile could not be found in a specific language.;DAN=%1 for profil %2.;ENU=%1  for Profile %2.';
      ProfileResxFileNotFoundMsg@1077 : TextConst '@@@=Tells the user that translated UI strings for a given profile could not be found for one or more languages.;DAN=Kan ikke finde oversatte ressourcer for det/de følgende sprog\%1\Det kan ske, hvis et profil-id er blevet oversat mellem sprog.;ENU=Could not find translated resources for the following language(s)\%1\This can happen if Profile ID is translated between languages.';
      AttributesNodeNameTxt@1071 : TextConst '@@@={Locked};DAN=Attributes;ENU=Attributes';
      NodeNodeNameTxt@1070 : TextConst '@@@={Locked};DAN=Node;ENU=Node';
      NodesNodeNameTxt@1069 : TextConst '@@@={Locked};DAN=Nodes;ENU=Nodes';
      CaptionMLAttributeNameTxt@1068 : TextConst '@@@={Locked};DAN=CaptionML;ENU=CaptionML';
      idLowerAttributeNameTxt@1066 : TextConst '@@@={Locked};DAN=id;ENU=id';
      NameAttributeNameLowerTxt@1065 : TextConst '@@@={Locked};DAN=name;ENU=name';
      ValueAttributeNameTxt@1063 : TextConst '@@@={Locked};DAN=value;ENU=value';
      RegexAppendCaptionMLTxt@1062 : TextConst '@@@={Locked};DAN="%1=%2";ENU="%1=%2"';
      ReplaceCaptionMLPatternTxt@1061 : TextConst '@@@={Locked};DAN="%1=.+?(?=;[A-Z]{3}=|$)";ENU="%1=.+?(?=;[A-Z]{3}=|$)"';
      RemoveCaptionMLPatternTxt@1076 : TextConst '@@@={Locked};DAN="%1=.+?(?<=;)(?=[A-Z]{3}=)|;%1=.+?(?=;[A-Z]{3}=|$)";ENU="%1=.+?(?<=;)(?=[A-Z]{3}=)|;%1=.+?(?=;[A-Z]{3}=|$)"';
      ExtractCaptionMLPatternTxt@1078 : TextConst '@@@={Locked};DAN="[A-Z]{3}(?==)|(?<=[A-Z]{3}=).+?(?=;[A-Z]{3}=|$)";ENU="[A-Z]{3}(?==)|(?<=[A-Z]{3}=).+?(?=;[A-Z]{3}=|$)"';
      LanguagePatternTxt@1059 : TextConst '@@@={Locked};DAN="%1=";ENU="%1="';
      SelectImportFolderMsg@1058 : TextConst 'DAN=Vælg mappe, hvorfra der skal importeres oversættelser.;ENU=Select folder to import translations from.';
      SelectExportFolderMsg@1072 : TextConst 'DAN=Vælg mappe, hvortil der skal eksporteres oversættelser.;ENU=Select folder to export translations to.';
      SelectRemoveLanguageMsg@1074 : TextConst 'DAN=Vælg sprog til fjernelse af profiloversættelser.;ENU=Select language to remove profile translations for.';
      SelectRemoveLanguageTxt@1075 : TextConst '@@@={Locked};DAN=%1 - %2,;ENU=%1 - %2,';
      ProfileIDTxt@1051 : TextConst '@@@={Locked};DAN=Profile ID;ENU=Profile ID';
      ProfileIDCommentTxt@1082 : TextConst '@@@={Locked};DAN=Profile ID field from table 2000000074;ENU=Profile ID field from table 2000000074';
      ProfileDescriptionTxt@1052 : TextConst '@@@={Locked};DAN=Profile Description;ENU=Profile Description';
      ProfileDescriptionCommentTxt@1083 : TextConst '@@@={Locked};DAN=Description field from table 2000000074;ENU=Description field from table 2000000074';
      ExportResxFormatTxt@1080 : TextConst '@@@={Locked};DAN="%1;%2;%3";ENU="%1;%2;%3"';
      ExportResxCommentFormatTxt@1081 : TextConst '@@@={Locked};DAN=Page: %1 - PersonalizationId: %2 - ControlGuid: %3;ENU=Page: %1 - PersonalizationId: %2 - ControlGuid: %3';
      ZipFileEntryTxt@1057 : TextConst '@@@={Locked};DAN=%1\%2.resx;ENU=%1\%2.resx';
      ZipFileFormatNameTxt@1064 : TextConst '@@@={Locked};DAN=%1.zip;ENU=%1.zip';
      ZipFileNameTxt@1084 : TextConst 'DAN=Profilressourcer;ENU=ProfileResources';
      Mode@1073 : 'None,Import,Export,Remove';
      SelectTranslatedResxFileTxt@1089 : TextConst 'DAN=Vælg en zipfil med oversatte ressourcer.;ENU=Select a zip file with translated resources.';
      ImportCompleteMsg@1090 : TextConst '@@@=User must restart the client to see the imported translations.;DAN=Import fuldført. Genstart klienten, og anvend ændringer.;ENU=Import completed. Restart the client to apply changes.';
      ExportCompleteMsg@1092 : TextConst 'DAN=Eksport fuldført.;ENU=Export completed.';
      ExportNoEntriesFoundMsg@1094 : TextConst 'DAN=Ingen poster fundet at eksportere.;ENU=No entries found to export.';
      RemoveCompleteMsg@1093 : TextConst 'DAN=Sletning fuldført.;ENU=Remove completed.';
      CompletionMessageMsg@1095 : TextConst '@@@={Locked};DAN=%1\%2;ENU=%1\%2';
      NoImportResourcesFoundMsg@1096 : TextConst '@@@="%1 = User selected folder. ";DAN=Ingen ressourcer fundet at importere.;ENU=No resources found to import.';
      NoImportResourcesFoundForProfileMsg@1097 : TextConst '@@@="%1 = Profile ID";DAN=Ingen ressourcer fundet at importere for profil %1.;ENU=No resources found to import for Profile %1.';

    PROCEDURE InitializeProfiles@20();
    VAR
      Profile@1100 : Record 2000000072;
    BEGIN
      Profile.LOCKTABLE;
      IF Profile.FINDFIRST THEN
        EXIT;
      InsertProfile(Text004,Text005,9001);
      InsertProfile(Text006,Text007,9002);
      InsertProfile(Text008,Text009,9003);
      InsertProfile(Text010,Text011,9004);
      InsertProfile(Text012,Text013,9005);
      InsertProfile(Text014,Text015,9006);
      InsertProfile(Text016,Text017,9007);
      InsertProfile(Text018,Text019,9000);
      InsertProfile(Text020,Text021,9008);
      InsertProfile(Text022,Text023,9009);
      InsertProfile(Text024,Text025,9010);
      InsertProfile(Text026,Text027,9012);
      InsertProfile(Text028,Text029,9011);
      InsertProfile(Text030,Text031,9013);
      InsertProfile(Text032,Text033,9014);
      InsertProfile(Text034,Text035,9015);
      InsertProfile(Text036,Text037,9016);
      InsertProfile(Text038,Text039,9017);
      InsertProfile(Text040,Text041,9018);
      InsertProfile(Text042,Text043,9019);
      InsertProfile(Text044,Text045,9020);
      InsertProfile(Text046,Text047,9021);
      InsertProfile(SmallBusinessIDTxt,SmallBusinessDescriptionTxt,9022);
      COMMIT;
    END;

    PROCEDURE InsertProfile@21(ProfileID@1000 : Code[30];Description@1001 : Text[250];RoleCenterID@1002 : Integer);
    VAR
      Profile@1101 : Record 2000000072;
      Object@1102 : Record 2000000001;
    BEGIN
      Object.SETRANGE(Type,Object.Type::Page);
      Object.SETRANGE(ID,RoleCenterID);
      IF Object.ISEMPTY THEN
        EXIT;

      Profile.INIT;
      Profile."Profile ID" := ProfileID;
      Profile.Description := Description;
      Profile."Role Center ID" := RoleCenterID;
      Profile."Default Role Center" := (RoleCenterID = DefaultRoleCenterID);
      Profile.INSERT;
    END;

    PROCEDURE DefaultRoleCenterID@22() : Integer;
    BEGIN
      EXIT(9006);
    END;

    PROCEDURE GetProfileHavingDefaultRoleCenter@41() : Code[30];
    VAR
      Profile@1000 : Record 2000000072;
    BEGIN
      Profile.SETRANGE("Role Center ID",DefaultRoleCenterID);
      IF Profile.FINDFIRST THEN;
      EXIT(Profile."Profile ID");
    END;

    PROCEDURE CopyProfile@45(Profile@1035 : Record 2000000072;NewProfileID@1036 : Code[30]);
    VAR
      NewProfile@1037 : Record 2000000072;
      ProfileMetadata@1040 : Record 2000000074;
      NewProfileMetadata@1038 : Record 2000000074;
    BEGIN
      NewProfile.INIT;
      NewProfile.VALIDATE("Profile ID",NewProfileID);
      NewProfile.TESTFIELD("Profile ID");
      NewProfile.VALIDATE(Description,Profile.Description);
      NewProfile.VALIDATE("Role Center ID",Profile."Role Center ID");
      NewProfile.INSERT;

      ProfileMetadata.SETRANGE("Profile ID",Profile."Profile ID");
      IF ProfileMetadata.FINDSET THEN
        REPEAT
          ProfileMetadata.CALCFIELDS("Page Metadata Delta");

          NewProfileMetadata.INIT;
          NewProfileMetadata.COPY(ProfileMetadata);
          NewProfileMetadata."Profile ID" := NewProfileID;
          NewProfileMetadata.INSERT;
        UNTIL ProfileMetadata.NEXT = 0;
    END;

    PROCEDURE ClearProfileConfiguration@1(Profile@1000 : Record 2000000072);
    VAR
      ProfileMetadata@1001 : Record 2000000074;
    BEGIN
      IF NOT CONFIRM(Text001) THEN
        EXIT;

      ProfileMetadata.SETRANGE("Profile ID",Profile."Profile ID");
      ProfileMetadata.DELETEALL(TRUE);
    END;

    PROCEDURE ClearUserPersonalization@2(User@1000 : Record 2000000073);
    VAR
      UserMetadata@1001 : Record 2000000075;
    BEGIN
      IF NOT CONFIRM(Text002) THEN
        EXIT;

      UserMetadata.SETRANGE("User SID",User."User SID");
      UserMetadata.DELETEALL(TRUE);
    END;

    PROCEDURE ExportProfiles@3(FileName@1000 : Text;VAR Profile@1001 : Record 2000000072);
    VAR
      FileOutStream@1002 : OutStream;
      ProfileFile@1003 : File;
    BEGIN
      ProfileFile.CREATE(FileName);
      ProfileFile.CREATEOUTSTREAM(FileOutStream);
      XMLPORT.EXPORT(XMLPORT::"Profile Import/Export",FileOutStream,Profile);
      ProfileFile.CLOSE;
    END;

    PROCEDURE ImportProfiles@4(FileName@1000 : Text);
    VAR
      FileInStream@1001 : InStream;
      ProfileFile@1002 : File;
    BEGIN
      ProfileFile.OPEN(FileName);
      ProfileFile.CREATEINSTREAM(FileInStream);
      XMLPORT.IMPORT(XMLPORT::"Profile Import/Export",FileInStream);
      ProfileFile.CLOSE;
    END;

    PROCEDURE ChangeDefaultRoleCenter@24(ProfileID@1110 : Code[30]);
    VAR
      Profile@1111 : Record 2000000072;
    BEGIN
      Profile.SETRANGE("Default Role Center",TRUE);
      Profile.SETFILTER("Profile ID",'<> %1',ProfileID);
      IF Profile.FINDFIRST THEN BEGIN
        Profile."Default Role Center" := FALSE;
        Profile.MODIFY;
      END;
    END;

    PROCEDURE DeleteProfile@25(Profile@1112 : Record 2000000072);
    VAR
      UserPersonalization@1000 : Record 2000000073;
    BEGIN
      IF Profile."Default Role Center" THEN
        ERROR(Text003);

      UserPersonalization.SETRANGE("Profile ID",Profile."Profile ID");
      IF NOT UserPersonalization.ISEMPTY THEN
        ERROR(CannotDeleteDefaultUserProfileErr);
    END;

    PROCEDURE ImportTranslatedResources@7(VAR Profile@1002 : Record 2000000072;ResourcesZipFileOrFolder@1000 : Text;ShowCompletionMessage@1003 : Boolean);
    VAR
      FileManagement@1004 : Codeunit 419;
      ServerFolder@1001 : Text;
    BEGIN
      IF Profile.FINDSET THEN BEGIN
        InitializeDotnetVariables;
        ServerFolder := CopyResourcesToServer(ResourcesZipFileOrFolder);
        REPEAT
          IF ReadResourceFiles(Profile."Profile ID",ServerFolder) THEN BEGIN
            Mode := Mode::Import;
            ProcessConfigurationMetadata(Profile);
          END;
        UNTIL Profile.NEXT = 0;

        FileManagement.ServerRemoveDirectory(ServerFolder,TRUE);

        IF ShowCompletionMessage THEN
          GetCompletionMessage(TRUE);
      END;
    END;

    PROCEDURE ImportTranslatedResourcesWithFolderSelection@12(VAR Profile@1000 : Record 2000000072);
    VAR
      FileManagement@1002 : Codeunit 419;
      ResourceFolder@1001 : Text;
    BEGIN
      IF FileManagement.CanRunDotNetOnClient THEN
        ResourceFolder := SelectResourceImportFolder;
      IF (ResourceFolder <> '') OR FileManagement.IsWebClient THEN
        ImportTranslatedResources(Profile,ResourceFolder,TRUE);
    END;

    PROCEDURE ExportTranslatedResources@13(VAR Profile@1002 : Record 2000000072;ResourceFolder@1003 : Text);
    VAR
      FileManagement@1000 : Codeunit 419;
      FolderExists@1001 : Boolean;
    BEGIN
      IF Profile.FINDSET THEN BEGIN
        InitializeDotnetVariables;
        IF FileManagement.CanRunDotNetOnClient THEN
          FolderExists := FileManagement.ClientDirectoryExists(ResourceFolder);
        IF FileManagement.IsWebClient OR FolderExists THEN BEGIN
          Mode := Mode::Export;
          REPEAT
            ClearResourcesForProfile(Profile."Profile ID");
            ProcessConfigurationMetadata(Profile);
            ExportResourceFiles(ResourceFolder,Profile."Profile ID")
          UNTIL Profile.NEXT = 0
        END;
      END;
    END;

    PROCEDURE ExportTranslatedResourcesWithFolderSelection@9(VAR Profile@1000 : Record 2000000072);
    VAR
      FileManagement@1002 : Codeunit 419;
      ResourceFolder@1001 : Text;
    BEGIN
      IF FileManagement.CanRunDotNetOnClient THEN
        ResourceFolder := SelectResourceExportFolder;
      IF (ResourceFolder <> '') OR FileManagement.IsWebClient THEN BEGIN
        ExportTranslatedResources(Profile,ResourceFolder);
        GetCompletionMessage(TRUE);
      END;
    END;

    PROCEDURE RemoveTranslatedResources@15(VAR Profile@1002 : Record 2000000072;Language@1001 : Text[3]);
    BEGIN
      IF Profile.FINDSET THEN
        IF Language <> '' THEN BEGIN
          InitializeDotnetVariables;
          AppendDetectedLanguage(Language);
          Mode := Mode::Remove;

          REPEAT
            ProcessConfigurationMetadata(Profile);
          UNTIL Profile.NEXT = 0
        END;
    END;

    PROCEDURE RemoveTranslatedResourcesWithLanguageSelection@23(VAR Profile@1000 : Record 2000000072);
    VAR
      LanguageToRemove@1001 : Text[3];
    BEGIN
      LanguageToRemove := SelectLanguageToRemove;
      IF LanguageToRemove <> '' THEN BEGIN
        RemoveTranslatedResources(Profile,LanguageToRemove);
        GetCompletionMessage(TRUE);
      END;
    END;

    LOCAL PROCEDURE ProcessConfigurationMetadata@19(VAR Profile@1000 : Record 2000000072);
    VAR
      ProfileMetadata@1002 : Record 2000000074;
      ProfileConfigurationDOM@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      ProfileMetadata.SETRANGE("Profile ID",Profile."Profile ID");
      IF ProfileMetadata.FINDSET(TRUE) THEN BEGIN
        REPEAT
          LoadProfileMetadata(ProfileMetadata,ProfileConfigurationDOM);
          CurrentProfileID := ProfileMetadata."Profile ID";
          CurrentProfileDescription := Profile.Description;
          CurrentPageID := ProfileMetadata."Page ID";
          CurrentPersonalizationID := ProfileMetadata."Personalization ID";
          ParseConfiguration(ProfileConfigurationDOM);
          UpdateProfileConfigurationRecord(ProfileMetadata,ProfileConfigurationDOM);
        UNTIL ProfileMetadata.NEXT = 0
      END;
    END;

    PROCEDURE SelectResourceImportFolder@34() Folder : Text;
    VAR
      FileManagement@1001 : Codeunit 419;
    BEGIN
      IF FileManagement.CanRunDotNetOnClient THEN
        FileManagement.SelectFolderDialog(SelectImportFolderMsg,Folder);
    END;

    PROCEDURE SelectResourceExportFolder@26() Folder : Text;
    VAR
      FileManagement@1001 : Codeunit 419;
    BEGIN
      IF FileManagement.CanRunDotNetOnClient THEN
        FileManagement.SelectFolderDialog(SelectExportFolderMsg,Folder);
    END;

    PROCEDURE SelectLanguageToRemove@29() : Text[3];
    VAR
      WindowsLanguage@1000 : Record 2000000045;
      Options@1002 : Text;
      Selected@1001 : Integer;
    BEGIN
      FilterToInstalledLanguages(WindowsLanguage);
      IF WindowsLanguage.FINDSET THEN BEGIN
        REPEAT
          Options += STRSUBSTNO(SelectRemoveLanguageTxt,WindowsLanguage."Abbreviated Name",WindowsLanguage.Name);
        UNTIL WindowsLanguage.NEXT = 0;

        Selected := STRMENU(Options,0,SelectRemoveLanguageMsg);
        IF Selected > 0 THEN
          EXIT(COPYSTR(SELECTSTR(Selected,Options),1,3));
      END;

      EXIT('');
    END;

    PROCEDURE FilterToInstalledLanguages@32(VAR WindowsLanguage@1000 : Record 2000000045);
    BEGIN
      // Filter is the same used by the Select Language dialog in the Windows client
      WindowsLanguage.SETRANGE("Globally Enabled",TRUE);
      WindowsLanguage.SETRANGE("Localization Exist",TRUE);
      WindowsLanguage.SETFILTER("Language ID",'<> %1',1034);
      WindowsLanguage.FINDSET;
    END;

    LOCAL PROCEDURE IsLanguageInstalled@35(LanguageName@1000 : Text) : Boolean;
    VAR
      WindowsLanguage@1001 : Record 2000000045;
    BEGIN
      IF InstalledLanguages.Count = 0 THEN BEGIN
        FilterToInstalledLanguages(WindowsLanguage);
        IF WindowsLanguage.FINDSET THEN BEGIN
          REPEAT
            InstalledLanguages.Add(CultureInfo.GetCultureInfo(WindowsLanguage."Language ID").Name);
          UNTIL WindowsLanguage.NEXT = 0
        END;
      END;

      EXIT(InstalledLanguages.Contains(LanguageName));
    END;

    LOCAL PROCEDURE ReadResourceFiles@43(ProfileID@1001 : Code[30];ServerFolder@1016 : Text) : Boolean;
    VAR
      ProfileResourceImportExport@1015 : Record 9170;
      WindowsLanguage@1020 : Record 2000000045;
      FileManagement@1009 : Codeunit 419;
      ResxReader@1000 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Resources.ResXResourceReader";
      Enumerator@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IDictionaryEnumerator";
      KeySplits@1012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Directory@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      DirectoryInfo@1011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.DirectoryInfo";
      Directories@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Dir@1006 : Text;
      DirName@1002 : Text;
      FileName@1010 : Text;
      Language@1008 : Text[3];
      BaseProfileID@1017 : Code[30];
      i@1007 : Integer;
      ResourceCount@1013 : Integer;
    BEGIN
      ClearResourcesForProfile(ProfileID);

      IF (ServerFolder = '') OR (NOT FileManagement.ServerDirectoryExists(ServerFolder)) THEN
        EXIT(FALSE);

      Directories := Directory.GetDirectories(ServerFolder);
      FOR i := 0 TO Directories.Length - 1 DO BEGIN
        Dir := Directories.GetValue(i);
        DirName := DirectoryInfo.DirectoryInfo(Dir).Name;
        IF IsLanguageInstalled(DirName) THEN BEGIN
          Language := CultureInfo.GetCultureInfo(DirName).ThreeLetterWindowsLanguageName;
          AppendDetectedLanguage(Language);
          FilterToInstalledLanguages(WindowsLanguage);
          BaseProfileID := TranslateProfileID(ProfileID,WindowsLanguage,1033);
          FileName := FileManagement.CombinePath(Dir,BaseProfileID + '.Resx');
          IF FileManagement.ServerFileExists(FileName) THEN BEGIN
            ResxReader := ResxReader.ResXResourceReader(FileName);
            Enumerator := ResxReader.GetEnumerator;
            WHILE Enumerator.MoveNext DO BEGIN
              KeySplits := RegEx.Split(Convert.ToString(Enumerator.Key),';');
              IF KeySplits.Length = 3 THEN
                ProfileResourceImportExport.InsertRec(
                  ProfileID,Convert.ToInt32(KeySplits.GetValue(0)),Convert.ToString(KeySplits.GetValue(1)),
                  Convert.ToString(KeySplits.GetValue(2)),Language,Convert.ToString(Enumerator.Value));
            END;
          END ELSE
            InfoForCompletionMessage.Add(STRSUBSTNO(ProfileResxFileNotFoundTxt,Language,ProfileID));
        END;
      END;

      ResourceCount := CountResourcesForProfile(ProfileID);
      IF ResourceCount = 0 THEN
        InfoForCompletionMessage.Add(STRSUBSTNO(NoImportResourcesFoundForProfileMsg,ProfileID));

      EXIT(ResourceCount > 0);
    END;

    PROCEDURE TranslateProfileID@10(ProfileID@1001 : Code[30];VAR WindowsLanguage@1002 : Record 2000000045;TranslateToLanguageID@1003 : Integer) TranslatedProfileID : Code[30];
    VAR
      CurrentLanguage@1000 : Integer;
      TempLanguage@1004 : Integer;
    BEGIN
      CurrentLanguage := GLOBALLANGUAGE;

      REPEAT
        TempLanguage := WindowsLanguage."Language ID";
        IF GLOBALLANGUAGE <> TempLanguage THEN
          GLOBALLANGUAGE := TempLanguage;
        CASE ProfileID OF
          UPPERCASE(Text004):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text004;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text006):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text006;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text008):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text008;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text010):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text010;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text012):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text012;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text014):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text014;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text016):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text016;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text018):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text018;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text020):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text020;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text022):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text022;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text024):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text024;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text026):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text026;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text028):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text028;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text030):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text030;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text032):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text032;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text034):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text034;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text036):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text036;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text038):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text038;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text040):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text040;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text042):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text042;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text044):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text044;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(Text046):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := Text046;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
          UPPERCASE(SmallBusinessIDTxt):
            BEGIN
              CheckSetLanguage(TranslateToLanguageID);
              TranslatedProfileID := SmallBusinessIDTxt;
              WindowsLanguage.GET(TempLanguage); // Other profiles will match same language
            END;
        END;
      UNTIL (WindowsLanguage.NEXT = 0) OR (TranslatedProfileID <> '');

      IF GLOBALLANGUAGE <> CurrentLanguage THEN
        GLOBALLANGUAGE := CurrentLanguage;
      IF TranslatedProfileID = '' THEN
        TranslatedProfileID := ProfileID;
    END;

    LOCAL PROCEDURE CheckSetLanguage@47(LanguageID@1000 : Integer);
    BEGIN
      IF GLOBALLANGUAGE <> LanguageID THEN
        GLOBALLANGUAGE := LanguageID;
    END;

    LOCAL PROCEDURE CopyResourcesToServer@36(ResourcesZipFileOrFolder@1001 : Text) ServerFolder : Text;
    VAR
      FileManagement@1000 : Codeunit 419;
      ServerFile@1002 : Text;
    BEGIN
      IF FileManagement.IsWebClient THEN
        ServerFile := FileManagement.UploadFile(SelectTranslatedResxFileTxt,'*.zip');

      IF FileManagement.CanRunDotNetOnClient THEN BEGIN
        IF FileManagement.ClientDirectoryExists(ResourcesZipFileOrFolder) THEN BEGIN
          ServerFolder := FileManagement.UploadClientDirectorySilent(ResourcesZipFileOrFolder,'*.resx',TRUE);
          IF ServerFolder = '' THEN
            InfoForCompletionMessage.Add(NoImportResourcesFoundMsg);
          EXIT;
        END;
        IF ResourcesZipFileOrFolder = '' THEN
          ServerFile := FileManagement.UploadFile(SelectTranslatedResxFileTxt,'*.zip');
        IF FileManagement.GetExtension(ResourcesZipFileOrFolder) = 'zip' THEN
          ServerFile := FileManagement.UploadFileSilent(ResourcesZipFileOrFolder);
      END;

      IF ServerFile <> '' THEN BEGIN
        ServerFolder := FileManagement.ServerCreateTempSubDirectory;
        FileManagement.ExtractZipFile(ServerFile,ServerFolder);
        FileManagement.DeleteServerFile(ServerFile);
      END;
    END;

    LOCAL PROCEDURE ExportResourceFiles@18(ResourceFolder@1016 : Text;ProfileID@1001 : Code[30]);
    VAR
      ProfileResourceImportExport@1015 : Record 9170;
      WindowsLanguage@1018 : Record 2000000045;
      FileManagement@1002 : Codeunit 419;
      CurrentDir@1006 : Text;
      ZipArchiveName@1010 : Text;
      ZipFileEntry@1005 : Text;
      ServerFileName@1004 : Text;
      i@1007 : Integer;
      CurrentLanguage@1014 : Text;
      CultureName@1003 : Text;
      CanRunDotNetOnClient@1008 : Boolean;
    BEGIN
      CanRunDotNetOnClient := FileManagement.CanRunDotNetOnClient;

      IF NOT CanRunDotNetOnClient THEN
        ZipArchiveName := FileManagement.CreateZipArchiveObject;

      FOR i := 0 TO DetectedLanguages.Count - 1 DO BEGIN
        CurrentLanguage := DetectedLanguages.Item(i);
        ProfileResourceImportExport.SETRANGE("Profile ID",ProfileID);
        ProfileResourceImportExport.SETRANGE("Abbreviated Language Name",CurrentLanguage);

        IF ProfileResourceImportExport.FINDFIRST THEN BEGIN
          WindowsLanguage.SETRANGE("Abbreviated Name",CurrentLanguage);
          WindowsLanguage.FINDFIRST;
          CultureName := CultureInfo.GetCultureInfo(WindowsLanguage."Language ID").Name;
          CurrentDir := FileManagement.CombinePath(ResourceFolder,CultureName);

          ServerFileName := FileManagement.ServerTempFileName('.Resx');
          AppendToResxFile(ProfileResourceImportExport,ProfileID,ServerFileName);

          IF NOT CanRunDotNetOnClient THEN BEGIN
            ZipFileEntry := STRSUBSTNO(ZipFileEntryTxt,CultureName,ProfileID);
            FileManagement.AddFileToZipArchive(ServerFileName,ZipFileEntry);
          END ELSE BEGIN
            FileManagement.CreateClientDirectory(CurrentDir);
            FileManagement.DownloadToFile(ServerFileName,FileManagement.CombinePath(CurrentDir,ProfileID + '.Resx'));
          END;
          FileManagement.DeleteServerFile(ServerFileName);
        END ELSE
          InfoForCompletionMessage.Add(ExportNoEntriesFoundMsg);
      END;

      IF NOT CanRunDotNetOnClient THEN BEGIN
        FileManagement.CloseZipArchive;
        FileManagement.DownloadHandler(ZipArchiveName,'','','',STRSUBSTNO(ZipFileFormatNameTxt,ZipFileNameTxt));
      END;
    END;

    LOCAL PROCEDURE AppendToResxFile@5(VAR ProfileResourceImportExport@1002 : Record 9170;ProfileID@1004 : Code[30];ServerFileName@1003 : Text);
    VAR
      ResxWriter@1001 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Resources.ResXResourceWriter";
      ResxDataNode@1000 : DotNet "'System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Resources.ResXDataNode";
      Key@1006 : Text;
      Comment@1005 : Text;
    BEGIN
      ResxWriter := ResxWriter.ResXResourceWriter(ServerFileName);
      ResxDataNode := ResxDataNode.ResXDataNode(ProfileIDTxt,ProfileID);
      ResxDataNode.Comment := ProfileIDCommentTxt;
      ResxWriter.AddResource(ResxDataNode);
      ResxDataNode := ResxDataNode.ResXDataNode(ProfileDescriptionTxt,CurrentProfileDescription);
      ResxDataNode.Comment := ProfileDescriptionCommentTxt;
      ResxWriter.AddResource(ResxDataNode);

      REPEAT
        Key := STRSUBSTNO(ExportResxFormatTxt,
            ProfileResourceImportExport."Page ID",
            ProfileResourceImportExport."Personalization ID",
            ProfileResourceImportExport."Control GUID");

        Comment := STRSUBSTNO(ExportResxCommentFormatTxt,
            ProfileResourceImportExport."Page ID",
            ProfileResourceImportExport."Personalization ID",
            ProfileResourceImportExport."Control GUID");

        ResxDataNode := ResxDataNode.ResXDataNode(Key,ProfileResourceImportExport.Value);
        ResxDataNode.Comment := Comment;
        ResxWriter.AddResource(ResxDataNode);
      UNTIL ProfileResourceImportExport.NEXT = 0;

      ResxWriter.Close;
    END;

    LOCAL PROCEDURE LoadProfileMetadata@101(ProfileMetadata@1000 : Record 2000000074;VAR ObjectDOM@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      InStr@1004 : InStream;
    BEGIN
      ProfileMetadata.CALCFIELDS("Page Metadata Delta");
      ProfileMetadata."Page Metadata Delta".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,ObjectDOM);
    END;

    LOCAL PROCEDURE ParseConfiguration@113(VAR ProfileConfigurationDOM@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      ChangeNodeList@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ChangeNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DeltaNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ChangeType@1001 : Text;
      i@1002 : Integer;
    BEGIN
      DeltaNode := ProfileConfigurationDOM.DocumentElement;
      ChangeNodeList := DeltaNode.FirstChild.ChildNodes;

      FOR i := 0 TO ChangeNodeList.Count - 1 DO BEGIN
        ChangeNode := ChangeNodeList.ItemOf(i);
        ChangeType := ChangeNode.Name;
        CASE LOWERCASE(ChangeType) OF
          'add':
            ParseAdd(ProfileConfigurationDOM,ChangeNode);
          'update':
            ParseUpdate(ChangeNode);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateProfileConfigurationRecord@28(VAR ProfileMetadata@1000 : Record 2000000074;ProfileConfigurationDOM@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      OutStr@1004 : OutStream;
    BEGIN
      IF NOT (Mode IN [Mode::Import,Mode::Remove]) THEN
        EXIT;
      ProfileMetadata."Page Metadata Delta".CREATEOUTSTREAM(OutStr);
      ProfileConfigurationDOM.Save(OutStr);
      ProfileMetadata.MODIFY;
    END;

    LOCAL PROCEDURE ParseAdd@65(XmlDocument@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NodeNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMManagement.FindNode(XmlNode,NodeNodeNameTxt,NodeNode);
      ParseAddNode(XmlDocument,NodeNode);
    END;

    LOCAL PROCEDURE ParseAddNode@6(XmlDocument@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XmlNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NodeNode@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodesNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ControlGuid@1000 : Text;
      i@1005 : Integer;
    BEGIN
      ControlGuid := XMLDOMManagement.GetAttributeValue(XmlNode,idLowerAttributeNameTxt);
      ProcessAddNodes(XmlNode,COPYSTR(ControlGuid,1,40));

      NodesNode := XmlNode.SelectSingleNode(NodesNodeNameTxt);
      FOR i := 0 TO NodesNode.ChildNodes.Count - 1 DO BEGIN
        NodeNode := NodesNode.ChildNodes.ItemOf(i);
        ParseAddNode(XmlDocument,NodeNode);
      END;
    END;

    LOCAL PROCEDURE ParseUpdate@128(VAR XmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      CaptionMLAttribute@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      ControlGuid@1004 : Text;
      CaptionMLValue@1003 : Text;
    BEGIN
      IF XMLDOMManagement.GetAttributeValue(XmlNode,NameAttributeNameLowerTxt) <> CaptionMLAttributeNameTxt THEN
        EXIT;

      IF NOT XMLDOMManagement.FindAttribute(XmlNode,CaptionMLAttribute,ValueAttributeNameTxt) THEN
        EXIT;

      ControlGuid := XMLDOMManagement.GetAttributeValue(XmlNode,idLowerAttributeNameTxt);

      CaptionMLValue := CaptionMLAttribute.Value;
      CASE Mode OF
        Mode::Export:
          BEGIN
            ExtractCaptions(COPYSTR(ControlGuid,1,40),CaptionMLValue);
            EXIT;
          END;
        Mode::Import:
          CaptionMLValue := AppendCaptions(COPYSTR(ControlGuid,1,40),CaptionMLValue);
        Mode::Remove:
          CaptionMLValue := RemoveCaptions(CaptionMLValue);
      END;

      CaptionMLAttribute.Value(CaptionMLValue);
    END;

    LOCAL PROCEDURE ProcessAddNodes@14(NodeNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ControlGuid@1014 : Code[40]);
    VAR
      AttributesNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AttributeNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CaptionMLAttribute@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      Attribute@1006 : Text;
      CaptionMLValue@1013 : Text;
      i@1003 : Integer;
    BEGIN
      IF XMLDOMManagement.FindNode(NodeNode,AttributesNodeNameTxt,AttributesNode) THEN
        FOR i := 0 TO AttributesNode.ChildNodes.Count - 1 DO BEGIN
          AttributeNode := AttributesNode.ChildNodes.ItemOf(i);
          Attribute := XMLDOMManagement.GetAttributeValue(AttributeNode,NameAttributeNameLowerTxt);
          IF Attribute = CaptionMLAttributeNameTxt THEN BEGIN
            IF NOT XMLDOMManagement.FindAttribute(AttributeNode,CaptionMLAttribute,ValueAttributeNameTxt) THEN
              EXIT;
            CaptionMLValue := CaptionMLAttribute.Value;
            IF CaptionMLValue <> '' THEN BEGIN
              CASE Mode OF
                Mode::Export:
                  BEGIN
                    ExtractCaptions(ControlGuid,CaptionMLValue);
                    EXIT;
                  END;
                Mode::Import:
                  CaptionMLValue := AppendCaptions(ControlGuid,CaptionMLValue);
                Mode::Remove:
                  CaptionMLValue := RemoveCaptions(CaptionMLValue);
              END;
              CaptionMLAttribute.Value(CaptionMLValue);
              EXIT;
            END;
          END;
        END;
    END;

    LOCAL PROCEDURE AppendCaptions@27(ControlGuid@1000 : Code[40];OriginalCaptionML@1004 : Text) : Text;
    VAR
      ProfileResourceImportExport@1001 : Record 9170;
      Pattern@1006 : Text;
      Translation@1008 : Text;
      Language@1009 : Text;
      Position@1007 : Integer;
      i@1005 : Integer;
    BEGIN
      FOR i := 0 TO DetectedLanguages.Count - 1 DO BEGIN
        Language := DetectedLanguages.Item(i);
        IF FindProfileLanguageResourcesImp(ProfileResourceImportExport,ControlGuid,Language) THEN BEGIN
          Translation := ProfileResourceImportExport.Value;
          Position := STRPOS(OriginalCaptionML,STRSUBSTNO(LanguagePatternTxt,Language));

          IF Position > 0 THEN BEGIN
            Pattern := STRSUBSTNO(ReplaceCaptionMLPatternTxt,Language);
            OriginalCaptionML := RegEx.Replace(OriginalCaptionML,Pattern,STRSUBSTNO(RegexAppendCaptionMLTxt,Language,Translation));
          END ELSE
            OriginalCaptionML += STRSUBSTNO(';%1=%2',Language,Translation);
        END;
      END;

      EXIT(OriginalCaptionML);
    END;

    LOCAL PROCEDURE RemoveCaptions@8(OriginalCaptionML@1004 : Text) : Text;
    VAR
      Pattern@1006 : Text;
      Language@1009 : Text;
      Position@1007 : Integer;
    BEGIN
      Language := DetectedLanguages.Item(0);

      Position := STRPOS(OriginalCaptionML,STRSUBSTNO(LanguagePatternTxt,Language));
      IF Position > 0 THEN BEGIN
        Pattern := STRSUBSTNO(RemoveCaptionMLPatternTxt,Language);
        OriginalCaptionML := RegEx.Replace(OriginalCaptionML,Pattern,'');
      END;

      EXIT(OriginalCaptionML);
    END;

    LOCAL PROCEDURE ExtractCaptions@11(ControlGuid@1000 : Code[40];OriginalCaptionML@1004 : Text);
    VAR
      ProfileResourceImportExport@1001 : Record 9170;
      Matches@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      AbbreviatedLanguageName@1006 : Text[3];
      Caption@1007 : Text[250];
      i@1005 : Integer;
    BEGIN
      Matches := RegEx.Matches(OriginalCaptionML,ExtractCaptionMLPatternTxt);

      FOR i := 0 TO Matches.Count - 1 DO BEGIN
        AbbreviatedLanguageName := Matches.Item(i).Value;
        AppendDetectedLanguage(AbbreviatedLanguageName);
        i += 1;
        Caption := Matches.Item(i).Value;

        ProfileResourceImportExport.InsertRec(
          CurrentProfileID,CurrentPageID,CurrentPersonalizationID,ControlGuid,AbbreviatedLanguageName,Caption);
      END;
    END;

    LOCAL PROCEDURE FindProfileLanguageResourcesImp@16(VAR ProfileResourceImportExport@1001 : Record 9170;ControlGuid@1002 : Code[40];language@1000 : Text) : Boolean;
    BEGIN
      ProfileResourceImportExport.SETRANGE("Abbreviated Language Name",language);
      ProfileResourceImportExport.SETRANGE("Profile ID",CurrentProfileID);
      ProfileResourceImportExport.SETRANGE("Page ID",CurrentPageID);
      ProfileResourceImportExport.SETRANGE("Personalization ID",CurrentPersonalizationID);
      ProfileResourceImportExport.SETRANGE("Control GUID",ControlGuid);
      EXIT(ProfileResourceImportExport.FINDFIRST);
    END;

    LOCAL PROCEDURE ClearResourcesForProfile@17(ProfileID@1000 : Code[30]);
    VAR
      ProfileResourceImportExport@1001 : Record 9170;
    BEGIN
      ProfileResourceImportExport.SETRANGE("Profile ID",ProfileID);
      ProfileResourceImportExport.DELETEALL;
    END;

    LOCAL PROCEDURE CountResourcesForProfile@46(ProfileID@1000 : Code[30]) : Integer;
    VAR
      ProfileResourceImportExport@1001 : Record 9170;
    BEGIN
      ProfileResourceImportExport.SETRANGE("Profile ID",ProfileID);
      IF ProfileResourceImportExport.FINDFIRST THEN
        EXIT(ProfileResourceImportExport.COUNT);
    END;

    LOCAL PROCEDURE InitializeDotnetVariables@59();
    BEGIN
      DetectedLanguages := DetectedLanguages.StringCollection;
      InfoForCompletionMessage := InfoForCompletionMessage.StringCollection;
      InstalledLanguages := InstalledLanguages.StringCollection;
    END;

    LOCAL PROCEDURE AppendDetectedLanguage@33(AbbreviatedLanguageName@1000 : Text[3]);
    BEGIN
      IF NOT DetectedLanguages.Contains(AbbreviatedLanguageName) THEN
        DetectedLanguages.Add(AbbreviatedLanguageName);
    END;

    PROCEDURE GetCompletionMessage@30(ShowAsMessage@1001 : Boolean) CompleteMessage : Text;
    VAR
      AdditionalInfo@1000 : Text;
    BEGIN
      AdditionalInfo := GetAdditionalInfo;

      CASE Mode OF
        Mode::Export:
          BEGIN
            IF AdditionalInfo <> '' THEN
              CompleteMessage := AdditionalInfo
            ELSE
              CompleteMessage := ExportCompleteMsg;
          END;
        Mode::Import:
          BEGIN
            IF AdditionalInfo <> '' THEN BEGIN
              AdditionalInfo := STRSUBSTNO(ProfileResxFileNotFoundMsg,AdditionalInfo);
              CompleteMessage := STRSUBSTNO(CompletionMessageMsg,ImportCompleteMsg,AdditionalInfo);
            END ELSE
              CompleteMessage := ImportCompleteMsg;
          END;
        Mode::Remove:
          BEGIN
            IF AdditionalInfo <> '' THEN
              CompleteMessage := AdditionalInfo
            ELSE
              CompleteMessage := RemoveCompleteMsg;
          END;
        ELSE
          CompleteMessage := AdditionalInfo;
      END;

      IF ShowAsMessage AND (CompleteMessage <> '') THEN
        MESSAGE(CompleteMessage);
    END;

    LOCAL PROCEDURE GetAdditionalInfo@42() ErrorMessage : Text;
    VAR
      i@1000 : Integer;
    BEGIN
      IF InfoForCompletionMessage.Count > 0 THEN BEGIN
        FOR i := 0 TO InfoForCompletionMessage.Count - 1 DO
          ErrorMessage += InfoForCompletionMessage.Item(i) + '\';
        ErrorMessage := DELCHR(ErrorMessage,'>','\');
      END;
    END;

    BEGIN
    END.
  }
}

