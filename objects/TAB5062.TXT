OBJECT Table 5062 Attachment
{
  OBJECT-PROPERTIES
  {
    Date=27-04-17;
    Time=12:00:00;
    Version List=NAVW19.00.00.48466;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Attachment2@1000 : Record 5062;
               "NextAttachmentNo."@1001 : Integer;
             BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;

               Attachment2.LOCKTABLE;
               IF Attachment2.FINDLAST THEN
                 "NextAttachmentNo." := Attachment2."No." + 1
               ELSE
                 "NextAttachmentNo." := 1;

               "No." := "NextAttachmentNo.";

               RMSetup.GET;
               "Storage Type" := RMSetup."Attachment Storage Type";
               IF "Storage Type" = "Storage Type"::"Disk File" THEN BEGIN
                 RMSetup.TESTFIELD("Attachment Storage Location");
                 "Storage Pointer" := RMSetup."Attachment Storage Location";
               END;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    CaptionML=[DAN=Vedhæftet fil;
               ENU=Attachment];
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Integer       ;CaptionML=[DAN=Nummer;
                                                              ENU=No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Attachment          ;BLOB          ;CaptionML=[DAN=Vedhæftet fil;
                                                              ENU=Attachment] }
    { 3   ;   ;Storage Type        ;Option        ;CaptionML=[DAN=Lagringstype;
                                                              ENU=Storage Type];
                                                   OptionCaptionML=[DAN=Integreret,Diskfil,Exchange-lager;
                                                                    ENU=Embedded,Disk File,Exchange Storage];
                                                   OptionString=Embedded,Disk File,Exchange Storage }
    { 4   ;   ;Storage Pointer     ;Text250       ;CaptionML=[DAN=Filnavn;
                                                              ENU=Storage Pointer] }
    { 5   ;   ;File Extension      ;Text250       ;CaptionML=[DAN=Filtype;
                                                              ENU=File Extension] }
    { 6   ;   ;Read Only           ;Boolean       ;CaptionML=[DAN=Skrivebeskyttet;
                                                              ENU=Read Only] }
    { 7   ;   ;Last Date Modified  ;Date          ;CaptionML=[DAN=Rettet den;
                                                              ENU=Last Date Modified] }
    { 8   ;   ;Last Time Modified  ;Time          ;CaptionML=[DAN=Rettet kl.;
                                                              ENU=Last Time Modified] }
    { 13  ;   ;Merge Source        ;BLOB          ;CaptionML=[DAN=Flettekilde;
                                                              ENU=Merge Source] }
    { 14  ;   ;Email Message ID    ;BLOB          ;CaptionML=[DAN=Mail-id;
                                                              ENU=Email Message ID] }
    { 15  ;   ;Email Entry ID      ;BLOB          ;CaptionML=[DAN=Mailpost-id;
                                                              ENU=Email Entry ID] }
    { 16  ;   ;Email Message Checksum;Integer     ;CaptionML=[DAN=Mailkontrolsum;
                                                              ENU=Email Message Checksum] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Email Message Checksum                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1002 : TextConst 'DAN=Den vedhæftede fil er tom.;ENU=The attachment is empty.';
      Text003@1003 : TextConst 'DAN=Den vedhæftede fil er allerede i brug på maskinen.;ENU=Attachment is already in use on this machine.';
      Text004@1004 : TextConst 'DAN=Den vedhæftede fil skal gemmes på disken, før du kan importere den.\\Vil du gemme filen?;ENU=The attachment file must be saved to disk before you can import it.\\Do you want to save the file?';
      Text005@1005 : TextConst 'DAN=Udlæs vedhæftet fil;ENU=Export Attachment';
      Text006@1006 : TextConst 'DAN=Indlæs vedhæftet fil;ENU=Import Attachment';
      Text007@1007 : TextConst 'DAN=Alle filer (*.*)|*.*;ENU=All Files (*.*)|*.*';
      Text008@1008 : TextConst 'DAN=Fejl under kopiering af fil: %1.;ENU=Error during copying file: %1.';
      Text009@1009 : TextConst 'DAN=Vil du fjerne %1?;ENU=Do you want to remove %1?';
      Text010@1010 : TextConst 'DAN=Den eksterne fil kunne ikke fjernes.;ENU=External file could not be removed.';
      Text013@1013 : TextConst 'DAN=Der kan kun udskrives Microsoft Word-dokumenter.;ENU=You can only print Microsoft Word documents.';
      Text014@1014 : TextConst 'DAN=Der kan kun telefaxes Microsoft Word-dokumenter.;ENU=You can only fax Microsoft Word documents.';
      Text015@1001 : TextConst 'DAN=Mailen kan ikke vises eller er blevet slettet.;ENU=The e-mail can not be displayed or has been deleted.';
      Text016@1011 : TextConst 'DAN=Når du er færdig med at arbejde med et dokument, bør du slette den tilhørende midlertidige fil. Selve dokumentet slettes ikke.\\Vil du slette den midlertidige fil?;ENU=When you have finished working with a document, you should delete the associated temporary file. Please note that this will not delete the document.\\Do you want to delete the temporary file?';
      Text020@1022 : TextConst 'DAN=En Outlook-dialogboks er åben. Luk den, og prøv igen.;ENU=An Outlook dialog box is open. Close it and try again.';
      CouldNotActivateOutlookErr@1023 : TextConst 'DAN=Der kan ikke oprettes forbindelse til Microsoft Outlook. Hvis Microsoft Outlook allerede kører, skal du kontrollere, at du ikke kører Microsoft Dynamics NAV eller Microsoft Outlook som administrator. Luk alle forekomster af Microsoft Outlook, og prøv igen.;ENU=Cannot connect to Microsoft Outlook. If Microsoft Outlook is already running, make sure that you are not running either Microsoft Dynamics NAV or Microsoft Outlook as administrator. Close all instances of Microsoft Outlook and try again.';
      UnspecifiedOutlookErr@1024 : TextConst 'DAN=" Microsoft Outlook kan ikke vise meddelelsen. Kontrollér, at Microsoft Outlook er konfigureret med adgang til den meddelelse, du prøver at åbne.";ENU=" Microsoft Outlook cannot display the message. Make sure that Microsoft Outlook is configured with access to the message that you are trying to open."';
      TempBlob@1020 : Record 99008535;
      RMSetup@1015 : Record 5079;
      FileMgt@1000 : Codeunit 419;
      AttachmentMgt@1021 : Codeunit 5052;
      AttachmentImportQst@1017 : TextConst 'DAN=Vil du importere den vedhæftede fil?;ENU=Do you want to import attachment?';
      AttachmentExportQst@1016 : TextConst 'DAN=Vil du eksportere den vedhæftede fil for at se eller redigere den eksternt?;ENU=Do you want to export attachment to view or edit it externaly?';

    PROCEDURE OpenAttachment@1(Caption@1000 : Text[260];IsTemporary@1001 : Boolean;LanguageCode@1100 : Code[10]);
    VAR
      WordManagement@1002 : Codeunit 5054;
      FileName@1004 : Text;
    BEGIN
      IF "Storage Type" = "Storage Type"::Embedded THEN BEGIN
        CALCFIELDS(Attachment);
        IF NOT Attachment.HASVALUE THEN
          ERROR(Text002);
      END;

      IF CURRENTCLIENTTYPE IN [CLIENTTYPE::Web,CLIENTTYPE::Tablet,CLIENTTYPE::Phone] THEN
        ProcessWebAttachment(Caption + '.' + "File Extension")
      ELSE BEGIN
        FileName := ConstFilename;
        IF NOT DeleteFile(FileName) THEN
          ERROR(Text003);
        ExportAttachmentToClientFile(FileName);
        IF WordManagement.IsWordDocumentExtension("File Extension") THEN
          WordManagement.OpenWordAttachment(Rec,FileName,Caption,IsTemporary,LanguageCode)
        ELSE BEGIN
          HYPERLINK(FileName);
          IF NOT "Read Only" THEN BEGIN
            IF CONFIRM(Text004,TRUE) THEN
              ImportAttachmentFromClientFile(FileName,IsTemporary,FALSE);
            DeleteFile(FileName);
          END ELSE
            IF CONFIRM(Text016,TRUE) THEN
              DeleteFile(FileName);
        END;
      END;
    END;

    PROCEDURE ShowAttachment@6(VAR SegLine@1000 : Record 5077;WordCaption@1001 : Text[260];IsTemporary@1002 : Boolean;Handler@1003 : Boolean);
    BEGIN
      RunAttachment(SegLine,WordCaption,IsTemporary,TRUE,Handler);
    END;

    PROCEDURE RunAttachment@24(VAR SegLine@1000 : Record 5077;WordCaption@1001 : Text[260];IsTemporary@1002 : Boolean;IsVisible@1004 : Boolean;Handler@1006 : Boolean);
    VAR
      WordManagement@1003 : Codeunit 5054;
      FileName@1005 : Text;
    BEGIN
      IF "Storage Type" = "Storage Type"::Embedded THEN
        CALCFIELDS(Attachment);

      IF CURRENTCLIENTTYPE IN [CLIENTTYPE::Web,CLIENTTYPE::Tablet,CLIENTTYPE::Phone] THEN
        ProcessWebAttachment(WordCaption + '.' + "File Extension")
      ELSE
        IF WordManagement.IsWordDocumentExtension("File Extension") THEN
          WordManagement.RunMergedDocument(SegLine,Rec,WordCaption,IsTemporary,IsVisible,Handler)
        ELSE BEGIN
          FileName := ConstFilename;
          ExportAttachmentToClientFile(FileName);
          HYPERLINK(FileName);
          IF NOT "Read Only" THEN BEGIN
            IF CONFIRM(Text004,TRUE) THEN
              ImportAttachmentFromClientFile(FileName,IsTemporary,FALSE);
            DeleteFile(FileName);
          END ELSE
            IF CONFIRM(Text016,TRUE) THEN
              DeleteFile(FileName);
        END;
    END;

    PROCEDURE ExportAttachmentToClientFile@2(VAR ExportToFile@1000 : Text) : Boolean;
    VAR
      FileFilter@1003 : Text;
      ServerFileName@1001 : Text;
      Path@1002 : Text;
      Success@1004 : Boolean;
    BEGIN
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      ServerFileName := FileMgt.ServerTempFileName("File Extension");
      ExportAttachmentToServerFile(ServerFileName);

      Path := FileMgt.Magicpath;
      IF ExportToFile = '' THEN BEGIN
        ExportToFile := FileMgt.GetFileName(FileMgt.ClientTempFileName("File Extension"));
        Path := '';
      END;

      FileFilter := UPPERCASE("File Extension") + ' (*.' + "File Extension" + ')|*.' + "File Extension";
      Success := DOWNLOAD(ServerFileName,Text005,Path,FileFilter,ExportToFile);
      FileMgt.DeleteServerFile(ServerFileName);
      EXIT(Success);
    END;

    PROCEDURE ImportAttachmentFromClientFile@5(ImportFromFile@1000 : Text;IsTemporary@1001 : Boolean;IsInherited@1002 : Boolean) : Boolean;
    VAR
      FileName@1005 : Text;
      ServerFileName@1010 : Text;
      NewAttachmentNo@1003 : Integer;
    BEGIN
      CLEARLASTERROR;
      IF IsTemporary THEN
        EXIT(ImportTemporaryAttachmentFromClientFile(ImportFromFile));

      TESTFIELD("Read Only",FALSE);
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      IF IsInherited THEN BEGIN
        NewAttachmentNo := AttachmentMgt.InsertAttachment("No.");
        GET(NewAttachmentNo);
      END ELSE
        IF "No." = 0 THEN
          NewAttachmentNo := AttachmentMgt.InsertAttachment(0)
        ELSE
          NewAttachmentNo := "No.";
      GET(NewAttachmentNo);

      // passing to UPLOAD function when only server path is specified, not ALSO the file name,
      // then function updates the server file path with the actual client name
      ServerFileName := TEMPORARYPATH;
      FileName := ImportFromFile;
      IF NOT UPLOAD(Text006,'',Text007,FileName,ServerFileName) THEN BEGIN
        IF GETLASTERRORTEXT <> '' THEN
          ERROR(Text008,GETLASTERRORTEXT);
        EXIT(FALSE);
      END;

      EXIT(ImportAttachmentFromServerFile(ServerFileName,FALSE,TRUE));
    END;

    LOCAL PROCEDURE ImportTemporaryAttachmentFromClientFile@21(ImportFromFile@1000 : Text) : Boolean;
    VAR
      FileName@1001 : Text;
    BEGIN
      FileName := FileMgt.BLOBImport(TempBlob,ImportFromFile);

      IF FileName <> '' THEN BEGIN
        Attachment := TempBlob.Blob;
        "Storage Type" := "Storage Type"::Embedded;
        "Storage Pointer" := '';
        "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(FileName)),1,250);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ExportAttachmentToServerFile@20(VAR ExportToFile@1000 : Text) : Boolean;
    BEGIN
      // This function assumes that CALCFIELDS on the attachment field has been called before
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      CASE "Storage Type" OF
        "Storage Type"::Embedded:
          BEGIN
            IF Attachment.HASVALUE THEN BEGIN
              TempBlob.Blob := Attachment;
              IF ExportToFile = '' THEN
                ExportToFile := FileMgt.ServerTempFileName("File Extension");
              FileMgt.BLOBExportToServerFile(TempBlob,ExportToFile); // export BLOB to file on server (UNC location also)
              EXIT(TRUE);
            END;
            EXIT(FALSE);
          END;
        "Storage Type"::"Disk File":
          BEGIN
            IF ExportToFile = '' THEN
              ExportToFile := TEMPORARYPATH + FileMgt.GetFileName(ConstDiskFileName);
            FileMgt.CopyServerFile(ConstDiskFileName,ExportToFile,FALSE); // Copy from server location to another location (UNC location also)
            EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ImportAttachmentFromServerFile@19(ImportFromFile@1000 : Text;IsTemporary@1002 : Boolean;Overwrite@1001 : Boolean) : Boolean;
    BEGIN
      IF IsTemporary THEN BEGIN
        ImportTemporaryAttachmentFromServerFile(ImportFromFile);
        EXIT(TRUE);
      END;

      IF NOT Overwrite THEN
        TESTFIELD("Read Only",FALSE);

      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      CASE RMSetup."Attachment Storage Type" OF
        RMSetup."Attachment Storage Type"::Embedded:
          BEGIN
            CLEAR(TempBlob);
            FileMgt.BLOBImportFromServerFile(TempBlob,ImportFromFile); // Copy from file on server (UNC location also)

            Attachment := TempBlob.Blob;
            "Storage Type" := "Storage Type"::Embedded;
            "Storage Pointer" := '';
            "File Extension" := COPYSTR(FileMgt.GetExtension(ImportFromFile),1,250);
            MODIFY(TRUE);
            EXIT(TRUE);
          END;
        "Storage Type"::"Disk File":
          BEGIN
            "Storage Type" := "Storage Type"::"Disk File";
            "Storage Pointer" := RMSetup."Attachment Storage Location";
            "File Extension" := COPYSTR(FileMgt.GetExtension(ImportFromFile),1,250);
            FileMgt.CopyServerFile(ImportFromFile,ConstDiskFileName,Overwrite); // Copy from UNC location to another UNC location
            MODIFY(TRUE);
            EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ImportTemporaryAttachmentFromServerFile@22(ImportFromFile@1000 : Text);
    BEGIN
      FileMgt.BLOBImportFromServerFile(TempBlob,ImportFromFile);
      Attachment := TempBlob.Blob;
      "Storage Type" := "Storage Type"::Embedded;
      "Storage Pointer" := '';
      "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(ImportFromFile)),1,250);
    END;

    PROCEDURE RemoveAttachment@7(Prompt@1001 : Boolean) DeleteOK@1000 : Boolean;
    VAR
      DeleteYesNo@1002 : Boolean;
    BEGIN
      DeleteOK := FALSE;
      DeleteYesNo := TRUE;
      IF Prompt THEN
        IF NOT CONFIRM(
             Text009,FALSE,TABLECAPTION)
        THEN
          DeleteYesNo := FALSE;

      IF DeleteYesNo THEN BEGIN
        IF "Storage Type" = "Storage Type"::"Disk File" THEN
          IF NOT FileMgt.DeleteServerFile(ConstDiskFileName) THEN
            MESSAGE(Text010);
        DELETE(TRUE);
        DeleteOK := TRUE;
      END;
    END;

    PROCEDURE WizEmbeddAttachment@4(FromAttachment@1000 : Record 5062);
    BEGIN
      Rec := FromAttachment;
      "No." := 0;
      "Storage Type" := "Storage Type"::Embedded;
      FromAttachment.TESTFIELD("No.");
      CASE FromAttachment."Storage Type" OF
        FromAttachment."Storage Type"::"Disk File":
          ImportAttachmentFromServerFile(FromAttachment.ConstDiskFileName,TRUE,FALSE);
        FromAttachment."Storage Type"::Embedded:
          BEGIN
            FromAttachment.CALCFIELDS(Attachment);
            IF FromAttachment.Attachment.HASVALUE THEN
              Attachment := FromAttachment.Attachment;
          END;
      END;
    END;

    PROCEDURE WizSaveAttachment@8();
    VAR
      Attachment2@1000 : Record 5062;
    BEGIN
      WITH RMSetup DO BEGIN
        GET;
        IF "Attachment Storage Type" = "Attachment Storage Type"::Embedded THEN BEGIN
          "Storage Pointer" := '';
          EXIT;
        END;
      END;

      "Storage Pointer" := RMSetup."Attachment Storage Location";

      WITH Attachment2 DO BEGIN
        "No." := Rec."No.";
        "Storage Type" := "Storage Type"::"Disk File";
        "Storage Pointer" := RMSetup."Attachment Storage Location";
        "File Extension" := Rec."File Extension";
        "Read Only" := Rec."Read Only";
        "Last Date Modified" := Rec."Last Date Modified";
        "Last Time Modified" := Rec."Last Time Modified";
      END;
      CLEAR(Rec);
      Rec := Attachment2;
    END;

    LOCAL PROCEDURE DeleteFile@10(FileName@1001 : Text) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      IF FileName = '' THEN
        EXIT(FALSE);

      IF NOT FileMgt.ClientFileExists(FileName) THEN
        EXIT(TRUE);

      REPEAT
        SLEEP(250);
        I := I + 1;
      UNTIL FileMgt.DeleteClientFile(FileName) OR (I = 25);
      EXIT(NOT FileMgt.ClientFileExists(FileName));
    END;

    PROCEDURE ConstFilename@9() FileName@1000 : Text;
    BEGIN
      FileName := FileMgt.ClientTempFileName("File Extension");
    END;

    PROCEDURE ConstDiskFileName@3() DiskFileName@1000 : Text;
    BEGIN
      DiskFileName := "Storage Pointer" + '\' + FORMAT("No.") + '.' + "File Extension";
    END;

    PROCEDURE CheckCorrespondenceType@11(CorrespondenceType@1001 : ' ,Hard Copy,E-Mail,Fax') ErrorText@1000 : Text[80];
    BEGIN
      CASE CorrespondenceType OF
        CorrespondenceType::"Hard Copy":
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text013);
        CorrespondenceType::Fax:
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text014);
      END;
    END;

    PROCEDURE LinkToMessage@12(MessageID@1006 : Text;EntryID@1000 : Text;RunTrigger@1001 : Boolean);
    BEGIN
      "Storage Type" := "Storage Type"::"Exchange Storage";
      "Read Only" := TRUE;

      SetMessageID(MessageID);
      SetEntryID(EntryID);

      MODIFY(RunTrigger);
    END;

    PROCEDURE DisplayInOutlook@13();
    VAR
      OutlookHelper@1000 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookHelper" RUNONCLIENT;
      Status@1002 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookStatusCode" RUNONCLIENT;
    BEGIN
      Status := OutlookHelper.DisplayMailFromPublicFolder(GetEntryID);

      IF Status.Equals(Status.CouldNotActivateOutlook) THEN
        ERROR(CouldNotActivateOutlookErr);

      IF Status.Equals(Status.ModalDialogOpened) THEN
        ERROR(Text020);

      IF Status.Equals(Status.ItemNotFound) THEN
        ERROR(Text015);

      // If the Exchange Entry Id requires patching to be used in Outlook
      // then we update the entry id.
      IF Status.Equals(Status.OkAfterExchange2013Patch) THEN BEGIN
        SetMessageID(OutlookHelper.PatchExchange2013WebServicesPublicFolderItemEntryId(GetEntryID));
        MODIFY(TRUE);
      END ELSE
        IF NOT Status.Equals(Status.Ok) THEN
          ERROR(UnspecifiedOutlookErr);
    END;

    PROCEDURE Checksum@14(MessageID@1000 : Text) ChecksumValue : Integer;
    VAR
      CharNo@1002 : Integer;
      DecValue@1003 : Decimal;
      MaxInteger@1004 : Integer;
    BEGIN
      RANDOMIZE(1);
      MaxInteger := 2147483647;

      FOR CharNo := 1 TO STRLEN(MessageID) DO
        DecValue := (DecValue + (((MessageID[CharNo] MOD 43) + 1) * RANDOM((MaxInteger DIV 44)))) MOD MaxInteger;
      ChecksumValue := DecValue;
    END;

    PROCEDURE GetMessageID@15() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Message ID");
      "Email Message ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    PROCEDURE SetMessageID@16(MessageID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      "Email Message ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(MessageID);
      "Email Message Checksum" := Checksum(MessageID);
    END;

    LOCAL PROCEDURE GetEntryID@17() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Entry ID");
      "Email Entry ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    PROCEDURE SetEntryID@18(EntryID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      "Email Entry ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(EntryID);
    END;

    LOCAL PROCEDURE ProcessWebAttachment@27(FileName@1000 : Text);
    BEGIN
      IF CONFIRM(AttachmentExportQst,TRUE) THEN BEGIN
        TempBlob.Blob := Attachment;
        FileMgt.BLOBExport(TempBlob,FileName,TRUE);
        IF NOT "Read Only" THEN
          IF CONFIRM(AttachmentImportQst,TRUE) THEN
            ImportAttachmentFromClientFile('',ISTEMPORARY,FALSE);
      END
    END;

    BEGIN
    END.
  }
}

