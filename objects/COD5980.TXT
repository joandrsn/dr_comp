OBJECT Codeunit 5980 Service-Post
{
  OBJECT-PROPERTIES
  {
    Date=25-02-19;
    Time=12:00:00;
    Version List=NAVW19.00.00.51103,NAVDK9.00.00.51103;
  }
  PROPERTIES
  {
    TableNo=5900;
    Permissions=TableData 5900=imd,
                TableData 5901=imd,
                TableData 5902=imd,
                TableData 5989=imd,
                TableData 5990=imd,
                TableData 5991=imd,
                TableData 5992=imd,
                TableData 5993=imd,
                TableData 5994=imd,
                TableData 5995=imd;
    OnRun=VAR
            DummyServLine@1000 : TEMPORARY Record 5902;
            GenJnlPostPreview@1001 : Codeunit 19;
          BEGIN
            IF NOT PostWithLines(Rec,DummyServLine,Ship,Consume,Invoice) THEN
              IF GETLASTERRORTEXT <> GenJnlPostPreview.GetPreviewModeErrMessage THEN
                ERROR(GETLASTERRORTEXT)
          END;

  }
  CODE
  {
    VAR
      ServiceShptLine@1011 : Record 5991;
      SourceCodeSetup@1006 : Record 242;
      SourceCode@1005 : Record 230;
      ServiceSetup@1004 : Record 5911;
      ServiceInvLine@1002 : Record 5993;
      ServiceCrMemoLine@1001 : Record 5995;
      TempWarehouseShipmentHeader@1007 : TEMPORARY Record 7320;
      WarehouseShipmentHeader@1014 : Record 7320;
      TempWarehouseShipmentLine@1015 : TEMPORARY Record 7321;
      ServDocumentsMgt@1000 : Codeunit 5988;
      WhsePostShpt@1016 : Codeunit 5763;
      Window@1012 : Dialog;
      PostingDate@1029 : Date;
      ReplaceDocumentDate@1030 : Boolean;
      ReplacePostingDate@1028 : Boolean;
      PostingDateExists@1027 : Boolean;
      HideValidationDialog@1013 : Boolean;
      Ship@1008 : Boolean;
      Consume@1009 : Boolean;
      Invoice@1010 : Boolean;
      Text001@1025 : TextConst 'DAN=Der er intet at bogføre.;ENU=There is nothing to post.';
      Text002@1024 : TextConst 'DAN=Linjerne bogføres          #2######\;ENU=Posting lines              #2######\';
      Text003@1023 : TextConst 'DAN=Bogfører serv. og moms     #3######\;ENU=Posting serv. and VAT      #3######\';
      Text004@1022 : TextConst 'DAN=Debitorerne bogføres       #4######\;ENU=Posting to customers       #4######\';
      Text005@1021 : TextConst 'DAN=Bogfører på modkonto       #5######;ENU=Posting to bal. account    #5######';
      Text006@1020 : TextConst 'DAN=Linjer bogføres            #2######;ENU=Posting lines              #2######';
      Text007@1003 : TextConst 'DAN=er ikke inden for den tilladte bogføringsperiode;ENU=is not within your range of allowed posting dates';
      WhseShip@1017 : Boolean;
      OIOXMLCheckServiceHeader@1101100000 : Codeunit 13613;
      PreviewMode@1019 : Boolean;
      NotSupportedDocumentTypeErr@1026 : TextConst '@@@="%1=Document Type e.g. Invoice";DAN=Dokumenttypen %1 understøttes ikke.;ENU=Document type %1 is not supported.';

    [TryFunction]
    PROCEDURE PostWithLines@9(VAR PassedServHeader@1003 : Record 5900;VAR PassedServLine@1011 : Record 5902;VAR PassedShip@1002 : Boolean;VAR PassedConsume@1001 : Boolean;VAR PassedInvoice@1000 : Boolean);
    VAR
      ServiceHeader@1012 : Record 5900;
      ServiceLine@1005 : Record 5902;
      GLEntry@1006 : Record 17;
      ServDocReg@1013 : Record 5936;
      WarehouseShipmentLine@1004 : Record 7321;
      PostedWhseShipmentHeader@1007 : Record 7322;
      PostedWhseShipmentLine@1008 : Record 7323;
      WarehouseShipmentHeaderLocal@1016 : Record 7320;
      TempTrackingSpecification@1018 : TEMPORARY Record 336;
      UpdateAnalysisView@1009 : Codeunit 410;
      UpdateItemAnalysisView@1010 : Codeunit 7150;
      WhseServiceRelease@1017 : Codeunit 5770;
      GenJnlPostPreview@1019 : Codeunit 19;
      NoSeriesManagement@1023 : Codeunit 396;
      ServDocNo@1015 : Code[20];
      ServDocType@1014 : Integer;
      ServInvoiceNo@1020 : Code[20];
      ServCrMemoNo@1021 : Code[20];
      ServShipmentNo@1022 : Code[20];
    BEGIN
      ServiceHeader := PassedServHeader;

      CLEAR(ServDocumentsMgt);
      IF PostingDateExists AND (ReplacePostingDate OR (ServiceHeader."Posting Date" = 0D)) THEN BEGIN
        ServiceHeader."Posting Date" := PostingDate;
        ServiceHeader.VALIDATE("Currency Code");
      END;
      IF PostingDateExists AND (ReplaceDocumentDate OR (ServiceHeader."Document Date" = 0D)) THEN
        ServiceHeader.VALIDATE("Document Date",PostingDate);
      Initialize(ServiceHeader,PassedServLine,PassedShip,PassedConsume,PassedInvoice);

      WITH ServiceHeader DO BEGIN
        IF Invoice THEN
          Window.OPEN('#1#################################\\' + Text002 + Text003 + Text004 + Text005)
        ELSE
          Window.OPEN('#1#################################\\' + Text006);
        Window.UPDATE(1,STRSUBSTNO('%1 %2',"Document Type","No."));

        IF ServDocumentsMgt.SetNoSeries(ServiceHeader) THEN
          MODIFY;

        ServDocumentsMgt.CalcInvDiscount;
        FIND;

        CollectWhseShipmentInformation(PassedServHeader);

        LockTables(ServiceLine,GLEntry);

        // fetch related document (if any), for testing invoices and credit memos fields.
        CLEAR(ServDocReg);
        ServDocReg.ServiceDocument("Document Type","No.",ServDocType,ServDocNo);

        // update quantites upon posting options and test related fields.
        ServDocumentsMgt.CheckAndBlankQtys(ServDocType);

        // create posted documents (both header and lines).
        WhseShip := FALSE;
        IF Ship THEN BEGIN
          ServShipmentNo := ServDocumentsMgt.PrepareShipmentHeader;
          WhseShip := NOT TempWarehouseShipmentHeader.ISEMPTY;
        END;
        IF Invoice THEN
          IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
            ServInvoiceNo := ServDocumentsMgt.PrepareInvoiceHeader(Window)
          ELSE
            ServCrMemoNo := ServDocumentsMgt.PrepareCrMemoHeader(Window);

        IF WhseShip THEN BEGIN
          WarehouseShipmentHeader.GET(TempWarehouseShipmentHeader."No.");
          WarehouseShipmentHeader.TESTFIELD("Posting Date");
          IF WarehouseShipmentHeader."Shipping No." = '' THEN BEGIN
            WarehouseShipmentHeader.TESTFIELD("Shipping No. Series");
            WarehouseShipmentHeader."Shipping No." :=
              NoSeriesManagement.GetNextNo(
                WarehouseShipmentHeader."Shipping No. Series",WarehouseShipmentHeader."Posting Date",TRUE);
          END;

          WarehouseShipmentHeader."Create Posted Header" := TRUE;
          WarehouseShipmentHeader.MODIFY;

          WhsePostShpt.CreatePostedShptHeader(
            PostedWhseShipmentHeader,WarehouseShipmentHeader,"Shipping No.","Posting Date");
        END;

        // main lines posting routine via Journals
        ServDocumentsMgt.PostDocumentLines(Window);
        ServDocumentsMgt.CollectTrackingSpecification(TempTrackingSpecification);

        ServDocumentsMgt.SetLastNos(ServiceHeader);
        MODIFY;

        // handling afterposting modification/deletion of documents
        ServDocumentsMgt.UpdateDocumentLines;

        ServDocumentsMgt.InsertValueEntryRelation;

        IF WhseShip THEN BEGIN
          IF TempWarehouseShipmentLine.FINDSET THEN
            REPEAT
              WarehouseShipmentLine.GET(TempWarehouseShipmentLine."No.",TempWarehouseShipmentLine."Line No.");
              WhsePostShpt.CreatePostedShptLine(WarehouseShipmentLine,PostedWhseShipmentHeader,
                PostedWhseShipmentLine,TempTrackingSpecification);
            UNTIL TempWarehouseShipmentLine.NEXT = 0;
          IF WarehouseShipmentHeaderLocal.GET(WarehouseShipmentHeader."No.") THEN
            WhsePostShpt.PostUpdateWhseDocuments(WarehouseShipmentHeader);
        END;

        IF PreviewMode THEN BEGIN
          Window.CLOSE;
          GenJnlPostPreview.Finish;
          ERROR(GenJnlPostPreview.GetPreviewModeErrMessage);
        END;

        Finalize(ServiceHeader);
      END;

      IF WhseShip THEN
        WhseServiceRelease.Release(ServiceHeader);
      COMMIT;

      OnAfterPostServiceDoc(ServiceHeader,ServShipmentNo,ServInvoiceNo,ServCrMemoNo);

      Window.CLOSE;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      UpdateItemAnalysisView.UpdateAll(0,TRUE);

      PassedServHeader := ServiceHeader;
    END;

    LOCAL PROCEDURE Initialize@7(VAR PassedServiceHeader@1000 : Record 5900;VAR PassedServiceLine@1004 : Record 5902;VAR PassedShip@1001 : Boolean;VAR PassedConsume@1002 : Boolean;VAR PassedInvoice@1003 : Boolean);
    BEGIN
      SetPostingOptions(PassedShip,PassedConsume,PassedInvoice);
      TestMandatoryFields(PassedServiceHeader,PassedServiceLine);
      OIOXMLCheckServiceHeader.RUN(PassedServiceHeader);
      ServDocumentsMgt.Initialize(PassedServiceHeader,PassedServiceLine);

      // Also calls procedure of the same name from ServDocMgt.
      // Might change the value of global Ship,Consume,Invoice vars.
      CheckAndSetPostingConstants(PassedServiceHeader,PassedShip,PassedConsume,PassedInvoice);

      // check for service lines with adjusted price
      IF (NOT HideValidationDialog OR NOT GUIALLOWED) AND
         Invoice AND (PassedServiceHeader."Document Type" = PassedServiceHeader."Document Type"::Order)
      THEN
        ServDocumentsMgt.CheckAdjustedLines;
    END;

    LOCAL PROCEDURE Finalize@8(VAR PassedServiceHeader@1000 : Record 5900);
    BEGIN
      ServDocumentsMgt.Finalize(PassedServiceHeader);
    END;

    LOCAL PROCEDURE CheckCloseCondition@1() : Boolean;
    BEGIN
      EXIT(ServDocumentsMgt.IsCloseConditionMet);
    END;

    LOCAL PROCEDURE CheckAndSetPostingConstants@5(VAR ServiceHeader@1000 : Record 5900;VAR PassedShip@1003 : Boolean;VAR PassedConsume@1002 : Boolean;VAR PassedInvoice@1001 : Boolean);
    BEGIN
      WITH ServiceHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Invoice:
            BEGIN
              PassedShip := TRUE;
              PassedInvoice := TRUE;
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              PassedShip := FALSE;
              PassedInvoice := TRUE;
            END;
        END;

        ServDocumentsMgt.CheckAndSetPostingConstants(PassedShip,PassedConsume,PassedInvoice);

        IF NOT (PassedShip OR PassedInvoice OR PassedConsume) THEN
          ERROR(Text001);

        IF Invoice AND ("Document Type" <> "Document Type"::"Credit Memo") THEN
          TESTFIELD("Due Date");
      END;
      SetPostingOptions(PassedShip,PassedConsume,PassedInvoice);
    END;

    LOCAL PROCEDURE TestMandatoryFields@12(VAR PassedServiceHeader@1000 : Record 5900;VAR PassedServiceLine@1002 : Record 5902);
    VAR
      GenJnlCheckLine@1001 : Codeunit 11;
    BEGIN
      WITH PassedServiceHeader DO BEGIN
        TESTFIELD("Document Type");
        TESTFIELD("Customer No.");
        TESTFIELD("Bill-to Customer No.");
        TESTFIELD("Posting Date");
        TESTFIELD("Document Date");
        IF PassedServiceLine.ISEMPTY THEN
          TestServLinePostingDate("Document Type","No.")
        ELSE BEGIN
          IF "Posting Date" <> PassedServiceLine."Posting Date" THEN BEGIN
            IF PassedServiceLine.Type <> PassedServiceLine.Type::" " THEN
              IF GenJnlCheckLine.DateNotAllowed(PassedServiceLine."Posting Date") THEN
                PassedServiceLine.FIELDERROR("Posting Date",Text007);

            IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
              FIELDERROR("Posting Date",Text007);
          END;
        END;
        TestMandatoryFields(PassedServiceLine);
      END;
    END;

    PROCEDURE SetPostingDate@2(NewReplacePostingDate@1000 : Boolean;NewReplaceDocumentDate@1001 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      CLEARALL;
      PostingDateExists := TRUE;
      ReplacePostingDate := NewReplacePostingDate;
      ReplaceDocumentDate := NewReplaceDocumentDate;
      PostingDate := NewPostingDate;
    END;

    PROCEDURE SetPostingOptions@4(PassedShip@1000 : Boolean;PassedConsume@1001 : Boolean;PassedInvoice@1002 : Boolean);
    BEGIN
      Ship := PassedShip;
      Consume := PassedConsume;
      Invoice := PassedInvoice;
      ServDocumentsMgt.SetPostingOptions(Ship,Consume,Invoice);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE TestDeleteHeader@19(ServiceHeader@1000 : Record 5900;VAR ServiceShptHeader@1001 : Record 5990;VAR ServiceInvHeader@1002 : Record 5992;VAR ServiceCrMemoHeader@1003 : Record 5994);
    BEGIN
      WITH ServiceHeader DO BEGIN
        CLEAR(ServiceShptHeader);
        CLEAR(ServiceInvHeader);
        CLEAR(ServiceCrMemoHeader);
        ServiceSetup.GET;

        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        IF ("Shipping No. Series" <> '') AND ("Shipping No." <> '') THEN BEGIN
          ServiceShptHeader.TRANSFERFIELDS(ServiceHeader);
          ServiceShptHeader."No." := "Shipping No.";
          ServiceShptHeader."Posting Date" := TODAY;
          ServiceShptHeader."User ID" := USERID;
          ServiceShptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::Invoice) AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          ServiceInvHeader.TRANSFERFIELDS(ServiceHeader);
          IF "Posting No." <> '' THEN
            ServiceInvHeader."No." := "Posting No.";
          IF "Document Type" = "Document Type"::Invoice THEN BEGIN
            ServiceInvHeader."Pre-Assigned No. Series" := "No. Series";
            ServiceInvHeader."Pre-Assigned No." := "No.";
          END ELSE BEGIN
            ServiceInvHeader."Pre-Assigned No. Series" := '';
            ServiceInvHeader."Pre-Assigned No." := '';
            ServiceInvHeader."Order No. Series" := "No. Series";
            ServiceInvHeader."Order No." := "No.";
          END;
          ServiceInvHeader."Posting Date" := TODAY;
          ServiceInvHeader."User ID" := USERID;
          ServiceInvHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::"Credit Memo"]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::"Credit Memo") AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          ServiceCrMemoHeader.TRANSFERFIELDS(ServiceHeader);
          IF "Posting No." <> '' THEN
            ServiceCrMemoHeader."No." := "Posting No.";
          ServiceCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          ServiceCrMemoHeader."Pre-Assigned No." := "No.";
          ServiceCrMemoHeader."Posting Date" := TODAY;
          ServiceCrMemoHeader."User ID" := USERID;
          ServiceCrMemoHeader."Source Code" := SourceCode.Code;
        END;
      END;
    END;

    LOCAL PROCEDURE LockTables@58(VAR ServiceLine@1003 : Record 5902;VAR GLEntry@1005 : Record 17);
    VAR
      GLSetup@1004 : Record 98;
    BEGIN
      ServiceLine.LOCKTABLE;

      GLSetup.GET;
      IF NOT GLSetup.OptimGLEntLockForMultiuserEnv THEN BEGIN
        GLEntry.LOCKTABLE;
        IF GLEntry.FIND('+') THEN;
      END;
    END;

    PROCEDURE DeleteHeader@10(ServiceHeader@1000 : Record 5900;VAR ServiceShptHeader@1001 : Record 5990;VAR ServiceInvHeader@1002 : Record 5992;VAR ServiceCrMemoHeader@1003 : Record 5994);
    BEGIN
      WITH ServiceHeader DO BEGIN
        TestDeleteHeader(ServiceHeader,ServiceShptHeader,ServiceInvHeader,ServiceCrMemoHeader);
        IF ServiceShptHeader."No." <> '' THEN BEGIN
          ServiceShptHeader.INSERT;
          ServiceShptLine.INIT;
          ServiceShptLine."Document No." := ServiceShptHeader."No.";
          ServiceShptLine."Line No." := 10000;
          ServiceShptLine.Description := SourceCode.Description;
          ServiceShptLine.INSERT;
        END;

        IF ServiceInvHeader."No." <> '' THEN BEGIN
          ServiceInvHeader.INSERT;
          ServiceInvLine.INIT;
          ServiceInvLine."Document No." := ServiceInvHeader."No.";
          ServiceInvLine."Line No." := 10000;
          ServiceInvLine.Description := SourceCode.Description;
          ServiceInvLine.INSERT;
        END;

        IF ServiceCrMemoHeader."No." <> '' THEN BEGIN
          ServiceCrMemoHeader.INSERT;
          ServiceCrMemoLine.INIT;
          ServiceCrMemoLine."Document No." := ServiceCrMemoHeader."No.";
          ServiceCrMemoLine."Line No." := 10000;
          ServiceCrMemoLine.Description := SourceCode.Description;
          ServiceCrMemoLine.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CollectWhseShipmentInformation@3(ServiceHeader@1000 : Record 5900);
    VAR
      WarehouseShipmentHeaderLocal@1002 : Record 7320;
      WarehouseShipmentLineLocal@1001 : Record 7321;
      ServiceLine@1003 : Record 5902;
    BEGIN
      TempWarehouseShipmentHeader.DELETEALL;
      TempWarehouseShipmentLine.DELETEALL;
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.SETFILTER("Qty. to Ship",'<>%1',0);
      IF NOT ServiceLine.FINDSET THEN
        EXIT;
      WarehouseShipmentLineLocal.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLineLocal.SETRANGE("Source Type",DATABASE::"Service Line");
      WarehouseShipmentLineLocal.SETRANGE("Source Subtype",ServiceHeader."Document Type");
      WarehouseShipmentLineLocal.SETRANGE("Source No.",ServiceHeader."No.");
      REPEAT
        WarehouseShipmentLineLocal.SETRANGE("Source Line No.",ServiceLine."Line No.");
        IF WarehouseShipmentLineLocal.FINDSET THEN
          REPEAT
            WarehouseShipmentLineLocal.TESTFIELD("Qty. to Ship",ServiceLine."Qty. to Ship");
            TempWarehouseShipmentLine := WarehouseShipmentLineLocal;
            TempWarehouseShipmentLine.INSERT;
            WarehouseShipmentHeaderLocal.GET(WarehouseShipmentLineLocal."No.");
            TempWarehouseShipmentHeader := WarehouseShipmentHeaderLocal;
            IF TempWarehouseShipmentHeader.INSERT THEN;
          UNTIL WarehouseShipmentLineLocal.NEXT = 0;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestServLinePostingDate@11(ServHeaderDocType@1000 : Integer;ServHeaderNo@1001 : Code[20]);
    VAR
      ServLine@1002 : Record 5902;
      GenJnlCheckLine@1003 : Codeunit 11;
    BEGIN
      WITH ServLine DO BEGIN
        SETRANGE("Document Type",ServHeaderDocType);
        SETRANGE("Document No.",ServHeaderNo);
        SETFILTER(Type,'<>%1',Type::" ");
        IF FINDSET THEN
          REPEAT
            IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
              FIELDERROR("Posting Date",Text007)
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SetPreviewMode@6(NewPreviewMode@1000 : Boolean);
    BEGIN
      PreviewMode := NewPreviewMode;
    END;

    PROCEDURE GetPostedDocumentRecord@222(ServiceHeader@1000 : Record 5900;VAR PostedServiceDocumentVariant@1001 : Variant);
    VAR
      ServiceInvHeader@1007 : Record 5992;
      ServiceCrMemoHeader@1006 : Record 5994;
    BEGIN
      WITH ServiceHeader DO
        CASE "Document Type" OF
          "Document Type"::Order:
            IF Invoice THEN BEGIN
              ServiceInvHeader.GET("Last Posting No.");
              ServiceInvHeader.SETRECFILTER;
              PostedServiceDocumentVariant := ServiceInvHeader;
            END;
          "Document Type"::Invoice:
            BEGIN
              IF "Last Posting No." = '' THEN
                ServiceInvHeader.GET("No.")
              ELSE
                ServiceInvHeader.GET("Last Posting No.");

              ServiceInvHeader.SETRECFILTER;
              PostedServiceDocumentVariant := ServiceInvHeader;
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              IF "Last Posting No." = '' THEN
                ServiceCrMemoHeader.GET("No.")
              ELSE
                ServiceCrMemoHeader.GET("Last Posting No.");
              ServiceCrMemoHeader.SETRECFILTER;
              PostedServiceDocumentVariant := ServiceCrMemoHeader;
            END;
          ELSE
            ERROR(STRSUBSTNO(NotSupportedDocumentTypeErr,"Document Type"));
        END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostServiceDoc@13(VAR ServiceHeader@1000 : Record 5900;ServShipmentNo@1001 : Code[20];ServInvoiceNo@1002 : Code[20];ServCrMemoNo@1003 : Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

