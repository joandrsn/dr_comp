OBJECT Table 1293 Payment Application Proposal
{
  OBJECT-PROPERTIES
  {
    Date=23-02-17;
    Time=12:00:00;
    Version List=NAVW19.00.00.48067;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               UpdateSortingOrder;
             END;

    OnModify=BEGIN
               UpdateSortingOrder;
             END;

    OnDelete=BEGIN
               TESTFIELD("Applies-to Entry No.",0);
               IF Applied THEN
                 Unapply;
             END;

    OnRename=BEGIN
               VerifyLineIsNotApplied;
             END;

    CaptionML=[DAN=Betalingsudligningsforslag;
               ENU=Payment Application Proposal];
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=[DAN=Bankkontonr.;
                                                              ENU=Bank Account No.] }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation"."Statement No." WHERE (Bank Account No.=FIELD(Bank Account No.),
                                                                                                                   Statement Type=FIELD(Statement Type));
                                                   CaptionML=[DAN=Kontoudtogsnr.;
                                                              ENU=Statement No.] }
    { 3   ;   ;Statement Line No.  ;Integer       ;CaptionML=[DAN=Kontoudtogslinjenr.;
                                                              ENU=Statement Line No.] }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=[DAN=Kontoudtogstype;
                                                              ENU=Statement Type];
                                                   OptionCaptionML=[DAN=Bankudligning,Betalingsudligning;
                                                                    ENU=Bank Reconciliation,Payment Application];
                                                   OptionString=Bank Reconciliation,Payment Application }
    { 21  ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                VerifyLineIsNotApplied;
                                                              END;

                                                   CaptionML=[DAN=Kontotype;
                                                              ENU=Account Type];
                                                   OptionCaptionML=[DAN=Finanskonto,Debitor,Kreditor,Bankkonto,Anlæg,IC-partner;
                                                                    ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 22  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                           Blocked=CONST(No))
                                                                                                                           ELSE IF (Account Type=CONST(Customer)) Customer
                                                                                                                           ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                                                                           ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                           ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                           ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=BEGIN
                                                                VerifyLineIsNotApplied;
                                                              END;

                                                   CaptionML=[DAN=Kontonr.;
                                                              ENU=Account No.] }
    { 23  ;   ;Applies-to Entry No.;Integer       ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Entry"
                                                                 ELSE IF (Account Type=CONST(Customer)) "Cust. Ledger Entry" WHERE (Open=CONST(Yes))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Ledger Entry" WHERE (Open=CONST(Yes))
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account Ledger Entry" WHERE (Open=CONST(Yes));
                                                   CaptionML=[DAN=Udlign.løbenr.;
                                                              ENU=Applies-to Entry No.] }
    { 24  ;   ;Applied Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Applied Amount" = 0) AND (xRec."Applied Amount" <> 0) THEN
                                                                  Unapply
                                                                ELSE
                                                                  UpdateAppliedAmt;
                                                              END;

                                                   CaptionML=[DAN=Udligningsbeløb;
                                                              ENU=Applied Amount] }
    { 25  ;   ;Applied             ;Boolean       ;OnValidate=VAR
                                                                BankAccReconLine@1000 : Record 274;
                                                              BEGIN
                                                                IF xRec.Applied = Applied THEN
                                                                  EXIT;

                                                                IF NOT Applied THEN
                                                                  Unapply;

                                                                IF Applied THEN BEGIN
                                                                  IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                    CrMemoSelectedToApply
                                                                  ELSE BEGIN
                                                                    BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
                                                                    IF BankAccReconLine.Difference = 0 THEN
                                                                      ERROR(PaymentAppliedErr);
                                                                  END;

                                                                  Apply(GetRemainingAmountAfterPosting,"Applies-to Entry No." <> 0);
                                                                END;
                                                              END;

                                                   CaptionML=[DAN=Udlignet;
                                                              ENU=Applied] }
    { 29  ;   ;Applied Pmt. Discount;Decimal      ;CaptionML=[DAN=Afstemt kontantrabat;
                                                              ENU=Applied Pmt. Discount];
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Quality             ;Integer       ;CaptionML=[DAN=Kvalitet;
                                                              ENU=Quality] }
    { 31  ;   ;Posting Date        ;Date          ;CaptionML=[DAN=Bogføringsdato;
                                                              ENU=Posting Date] }
    { 32  ;   ;Document Type       ;Option        ;CaptionML=[DAN=Dokumenttype;
                                                              ENU=Document Type];
                                                   OptionCaptionML=[DAN=" ,Betaling,Faktura,Kreditnota,Rentenota,Rykker,Refusion";
                                                                    ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 33  ;   ;Document No.        ;Code20        ;CaptionML=[DAN=Bilagsnr.;
                                                              ENU=Document No.] }
    { 34  ;   ;Description         ;Text50        ;CaptionML=[DAN=Beskrivelse;
                                                              ENU=Description] }
    { 35  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[DAN=Valutakode;
                                                              ENU=Currency Code];
                                                   Editable=No }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=[DAN=Forfaldsdato;
                                                              ENU=Due Date];
                                                   Editable=No }
    { 37  ;   ;External Document No.;Code35       ;CaptionML=[DAN=Eksternt bilagsnr.;
                                                              ENU=External Document No.] }
    { 50  ;   ;Match Confidence    ;Option        ;InitValue=None;
                                                   CaptionML=[DAN=Matchtillid;
                                                              ENU=Match Confidence];
                                                   OptionCaptionML=[DAN=Ingen,Lav,Medium,Høj,Høj - Tilknytning af tekst til konto,Manuel,Accepteret;
                                                                    ENU=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted];
                                                   OptionString=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                   Editable=No }
    { 51  ;   ;Pmt. Disc. Due Date ;Date          ;OnValidate=BEGIN
                                                                ChangeDiscountAmounts;
                                                              END;

                                                   CaptionML=[DAN=Forfaldsdato for kontantrabat;
                                                              ENU=Pmt. Disc. Due Date] }
    { 52  ;   ;Remaining Pmt. Disc. Possible;Decimal;
                                                   OnValidate=BEGIN
                                                                ChangeDiscountAmounts;
                                                              END;

                                                   CaptionML=[DAN=Mulig restkontantrabat;
                                                              ENU=Remaining Pmt. Disc. Possible] }
    { 53  ;   ;Pmt. Disc. Tolerance Date;Date     ;OnValidate=BEGIN
                                                                ChangeDiscountAmounts;
                                                              END;

                                                   CaptionML=[DAN=Kontantrabattolerancedato;
                                                              ENU=Pmt. Disc. Tolerance Date] }
    { 60  ;   ;Applied Amt. Incl. Discount;Decimal;OnValidate=BEGIN
                                                                IF ("Applied Amt. Incl. Discount" = 0) AND Applied THEN
                                                                  Unapply
                                                                ELSE
                                                                  VALIDATE("Applied Amount","Applied Amt. Incl. Discount");
                                                              END;

                                                   CaptionML=[DAN=Afstemt beløb inkl. rabat;
                                                              ENU=Applied Amt. Incl. Discount] }
    { 61  ;   ;Remaining Amount    ;Decimal       ;CaptionML=[DAN=Restbeløb;
                                                              ENU=Remaining Amount];
                                                   Editable=No }
    { 62  ;   ;Remaining Amt. Incl. Discount;Decimal;
                                                   CaptionML=[DAN=Restbeløb inkl. rabat;
                                                              ENU=Remaining Amt. Incl. Discount];
                                                   Editable=No }
    { 100 ;   ;Sorting Order       ;Integer       ;CaptionML=[DAN=Sorteringsrækkefølge;
                                                              ENU=Sorting Order];
                                                   Editable=No }
    { 101 ;   ;Stmt To Rem. Amount Difference;Decimal;
                                                   CaptionML=[DAN=Udtog til restbeløbsdifference;
                                                              ENU=Stmt To Rem. Amount Difference];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Statement Type,Bank Account No.,Statement No.,Statement Line No.,Account Type,Account No.,Applies-to Entry No.;
                                                   Clustered=Yes }
    {    ;Applied,Quality                          }
    {    ;Sorting Order                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      StmtAmtIsFullyAppliedErr@1001 : TextConst 'DAN=Kontoudtogsbeløbet er allerede helt afstemt.;ENU=The statement amount is already fully applied.';
      EntryDoesntExistErr@1002 : TextConst 'DAN=Posten findes ikke.;ENU=The entry does not exist.';
      CannotChangeAppliedLineErr@1000 : TextConst 'DAN=Du kan ikke ændre linjen, fordi posten er udlignet. Fjern først den udlignede post.;ENU=You cannot change the line because the entry is applied. Remove the applied entry first.';
      TransactionDateIsBeforePostingDateMsg@1004 : TextConst 'DAN=Transaktionsdatoen %1 ligger før bogføringsdatoen %2.;ENU=Transaction date %1 is before posting date %2.';
      PaymentAppliedErr@1003 : TextConst 'DAN=Betalingen er fuldt udlignet. Hvis du vil udligne betalingen til denne post, skal du først annullere udligningen af betalingen fra en anden post.;ENU=The payment is fully applied. To apply the payment to this entry, you must first unapply the payment from another entry.';
      WantToApplyCreditMemoAndInvoicesMsg@1005 : TextConst 'DAN=Hvis du vil udligne Kreditnota og Fakturaer, er det bedre at starte med at udligne kreditnotaer først og derefter udligne de øvrige poster.;ENU=If you want to apply Credit Memo and Invoices, it''s better to start from applying Credit Memos first and then apply all others entries.';

    LOCAL PROCEDURE Unapply@7();
    VAR
      AppliedPmtEntry@1000 : Record 1294;
    BEGIN
      IF NOT GetAppliedPaymentEntry(AppliedPmtEntry) THEN
        ERROR(EntryDoesntExistErr);

      AppliedPmtEntry.DELETE(TRUE);

      TRANSFERFIELDS(AppliedPmtEntry,FALSE);
      Applied := FALSE;

      "Applied Amt. Incl. Discount" := 0;

      MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAppliedAmt@1();
    VAR
      AmountToApply@1001 : Decimal;
    BEGIN
      AmountToApply := "Applied Amount";
      IF Applied THEN
        Unapply;

      IF AmountToApply = 0 THEN
        EXIT;

      Apply(AmountToApply,FALSE);
    END;

    PROCEDURE GetAppliedPaymentEntry@3(VAR AppliedPaymentEntry@1000 : Record 1294) : Boolean;
    BEGIN
      EXIT(
        AppliedPaymentEntry.GET(
          "Statement Type","Bank Account No.",
          "Statement No.","Statement Line No.",
          "Account Type","Account No.","Applies-to Entry No."));
    END;

    LOCAL PROCEDURE GetLedgEntryInfo@8();
    VAR
      TempAppliedPmtEntry@1000 : TEMPORARY Record 1294;
    BEGIN
      TempAppliedPmtEntry.TRANSFERFIELDS(Rec);
      TempAppliedPmtEntry.GetLedgEntryInfo;
      TRANSFERFIELDS(TempAppliedPmtEntry);
    END;

    PROCEDURE TransferFromBankAccReconLine@14(BankAccReconLine@1000 : Record 274);
    BEGIN
      "Statement Type" := BankAccReconLine."Statement Type";
      "Bank Account No." := BankAccReconLine."Bank Account No.";
      "Statement No." := BankAccReconLine."Statement No.";
      "Statement Line No." := BankAccReconLine."Statement Line No.";
    END;

    PROCEDURE CreateFromAppliedPaymentEntry@2(AppliedPaymentEntry@1000 : Record 1294);
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      INIT;
      TRANSFERFIELDS(AppliedPaymentEntry);
      UpdatePaymentDiscInfo;

      IF AppliedPaymentEntry."Applied Amount" <> 0 THEN
        Applied := TRUE;

      BankAccount.GET(AppliedPaymentEntry."Bank Account No.");

      UpdatePaymentDiscInfo;
      UpdateRemainingAmount(BankAccount);
      UpdateRemainingAmountExclDiscount;
      "Applied Amt. Incl. Discount" := "Applied Amount" - "Applied Pmt. Discount";
      INSERT(TRUE);
    END;

    PROCEDURE CreateFromBankStmtMacthingBuffer@10(TempBankStmtMatchingBuffer@1001 : TEMPORARY Record 1250;BankAccReconciliationLine@1003 : Record 274;BankAccount@1002 : Record 270);
    VAR
      BankPmtApplRule@1000 : Record 1252;
    BEGIN
      INIT;
      "Account Type" := TempBankStmtMatchingBuffer."Account Type";
      "Account No." := TempBankStmtMatchingBuffer."Account No.";

      IF TempBankStmtMatchingBuffer."Entry No." < 0 THEN
        "Applies-to Entry No." := 0
      ELSE
        "Applies-to Entry No." := TempBankStmtMatchingBuffer."Entry No.";

      GetLedgEntryInfo;
      Quality := TempBankStmtMatchingBuffer.Quality;
      "Match Confidence" := BankPmtApplRule.GetMatchConfidence(TempBankStmtMatchingBuffer.Quality);

      UpdatePaymentDiscInfo;
      UpdateRemainingAmount(BankAccount);
      UpdateRemainingAmountExclDiscount;
      "Stmt To Rem. Amount Difference" := ABS(BankAccReconciliationLine."Statement Amount" - "Remaining Amount");
      "Applied Amt. Incl. Discount" := "Applied Amount" - "Applied Pmt. Discount";
    END;

    LOCAL PROCEDURE UpdateSortingOrder@6();
    VAR
      BankPmtApplRule@1000 : Record 1252;
    BEGIN
      "Sorting Order" := -Quality;
      IF Applied THEN
        "Sorting Order" -= BankPmtApplRule.GetHighestPossibleScore;
    END;

    LOCAL PROCEDURE Apply@5(AmtToApply@1000 : Decimal;SuggestDiscAmt@1001 : Boolean);
    VAR
      AppliedPaymentEntry@1002 : Record 1294;
      BankAccReconciliationLine@1003 : Record 274;
      MatchBankPayments@1004 : Codeunit 1255;
    BEGIN
      AppliedPaymentEntry.TRANSFERFIELDS(Rec);
      BankAccReconciliationLine.GET(
        AppliedPaymentEntry."Statement Type",AppliedPaymentEntry."Bank Account No.",
        AppliedPaymentEntry."Statement No.",AppliedPaymentEntry."Statement Line No.");
      MatchBankPayments.SetApplicationDataInCVLedgEntry(
        "Account Type","Applies-to Entry No.",BankAccReconciliationLine.GetAppliesToID);

      IF AmtToApply = 0 THEN
        ERROR(StmtAmtIsFullyAppliedErr);

      IF SuggestDiscAmt THEN
        AppliedPaymentEntry.VALIDATE("Applies-to Entry No.")
      ELSE
        AppliedPaymentEntry.VALIDATE("Applied Amount",AmtToApply);

      AppliedPaymentEntry.INSERT(TRUE);

      TRANSFERFIELDS(AppliedPaymentEntry);
      Applied := TRUE;
      UpdateRemainingAmountExclDiscount;
      "Applied Amt. Incl. Discount" := "Applied Amount" - "Applied Pmt. Discount";
      MODIFY(TRUE);

      IF BankAccReconciliationLine."Transaction Date" < "Posting Date" THEN
        MESSAGE(STRSUBSTNO(TransactionDateIsBeforePostingDateMsg,BankAccReconciliationLine."Transaction Date","Posting Date"));
    END;

    PROCEDURE GetRemainingAmountAfterPostingValue@23() : Decimal;
    BEGIN
      IF "Applies-to Entry No." = 0 THEN
        EXIT(0);

      EXIT(GetRemainingAmountAfterPosting);
    END;

    LOCAL PROCEDURE GetRemainingAmountAfterPosting@4() : Decimal;
    VAR
      TempAppliedPaymentEntry@1000 : TEMPORARY Record 1294;
    BEGIN
      TempAppliedPaymentEntry.TRANSFERFIELDS(Rec);
      EXIT(
        TempAppliedPaymentEntry.GetRemAmt -
        TempAppliedPaymentEntry."Applied Amount" -
        TempAppliedPaymentEntry.GetAmtAppliedToOtherStmtLines);
    END;

    PROCEDURE RemoveApplications@9();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
      CurrentTempPaymentApplicationProposal@1001 : TEMPORARY Record 1293;
    BEGIN
      CurrentTempPaymentApplicationProposal := Rec;

      AddFilterOnAppliedPmtEntry(AppliedPaymentEntry);

      IF AppliedPaymentEntry.FINDSET THEN
        REPEAT
          GET(
            AppliedPaymentEntry."Statement Type",AppliedPaymentEntry."Bank Account No.",
            AppliedPaymentEntry."Statement No.",AppliedPaymentEntry."Statement Line No.",
            AppliedPaymentEntry."Account Type",AppliedPaymentEntry."Account No.",
            AppliedPaymentEntry."Applies-to Entry No.");
          Unapply;
        UNTIL AppliedPaymentEntry.NEXT = 0;

      Rec := CurrentTempPaymentApplicationProposal;
    END;

    PROCEDURE AccountNameDrillDown@35();
    VAR
      Customer@1002 : Record 18;
      Vendor@1001 : Record 23;
      GLAccount@1000 : Record 15;
    BEGIN
      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            Customer.GET("Account No.");
            PAGE.RUN(PAGE::"Customer Card",Customer);
          END;
        "Account Type"::Vendor:
          BEGIN
            Vendor.GET("Account No.");
            PAGE.RUN(PAGE::"Vendor Card",Vendor);
          END;
        "Account Type"::"G/L Account":
          BEGIN
            GLAccount.GET("Account No.");
            PAGE.RUN(PAGE::"G/L Account Card",GLAccount);
          END;
      END;
    END;

    PROCEDURE GetAccountName@11() : Text;
    VAR
      Customer@1002 : Record 18;
      Vendor@1001 : Record 23;
      GLAccount@1000 : Record 15;
      Name@1003 : Text;
    BEGIN
      Name := '';

      CASE "Account Type" OF
        "Account Type"::Customer:
          IF Customer.GET("Account No.") THEN
            Name := Customer.Name;
        "Account Type"::Vendor:
          IF Vendor.GET("Account No.") THEN
            Name := Vendor.Name;
        "Account Type"::"G/L Account":
          IF GLAccount.GET("Account No.") THEN
            Name := GLAccount.Name;
      END;

      EXIT(Name);
    END;

    LOCAL PROCEDURE ChangeDiscountAmounts@20();
    BEGIN
      UpdateLedgEntryDisc;
      UpdateRemainingAmountExclDiscount;

      IF "Applied Pmt. Discount" <> 0 THEN BEGIN
        "Applied Amount" -= "Applied Pmt. Discount";
        "Applied Pmt. Discount" := 0;
      END;

      UpdateAppliedAmt;
    END;

    LOCAL PROCEDURE UpdateLedgEntryDisc@42();
    VAR
      BankAccReconLine@1002 : Record 274;
      AppliedPmtEntry@1001 : Record 1294;
      BankAccReconPost@1000 : Codeunit 370;
    BEGIN
      TESTFIELD("Applies-to Entry No.");
      AppliedPmtEntry.TRANSFERFIELDS(Rec);
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");

      CASE "Account Type" OF
        "Account Type"::Customer:
          BankAccReconPost.ApplyCustLedgEntry(
            AppliedPmtEntry,'',BankAccReconLine."Transaction Date",
            "Pmt. Disc. Due Date","Pmt. Disc. Tolerance Date","Remaining Pmt. Disc. Possible");
        "Account Type"::Vendor:
          BankAccReconPost.ApplyVendLedgEntry(
            AppliedPmtEntry,'',BankAccReconLine."Transaction Date",
            "Pmt. Disc. Due Date","Pmt. Disc. Tolerance Date","Remaining Pmt. Disc. Possible");
      END;
    END;

    LOCAL PROCEDURE UpdateRemainingAmountExclDiscount@12();
    VAR
      BankAccReconLine@1000 : Record 274;
    BEGIN
      "Remaining Amt. Incl. Discount" := "Remaining Amount";

      IF NOT ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::Invoice]) THEN
        EXIT;

      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
      IF BankAccReconLine."Transaction Date" > "Pmt. Disc. Due Date" THEN
        EXIT;

      "Remaining Amt. Incl. Discount" -= "Remaining Pmt. Disc. Possible";
    END;

    LOCAL PROCEDURE UpdateRemainingAmount@15(BankAccount@1000 : Record 270);
    VAR
      CustLedgEntry@1001 : Record 21;
      VendLedgEntry@1002 : Record 25;
      BankAccLedgEntry@1003 : Record 271;
      RemainingAmount@1005 : Decimal;
      RemainingAmountLCY@1006 : Decimal;
    BEGIN
      "Remaining Amount" := 0;

      IF "Applies-to Entry No." = 0 THEN
        EXIT;

      CASE "Account Type" OF
        "Account Type"::"Bank Account":
          BEGIN
            BankAccLedgEntry.SETRANGE(Open,TRUE);
            BankAccLedgEntry.SETRANGE("Bank Account No.","Account No.");
            BankAccLedgEntry.SETAUTOCALCFIELDS("Remaining Amount");
            BankAccLedgEntry.GET("Applies-to Entry No.");
            "Remaining Amount" := BankAccLedgEntry."Remaining Amount";
            EXIT;
          END;
        "Account Type"::Customer:
          BEGIN
            CustLedgEntry.SETRANGE(Open,TRUE);
            CustLedgEntry.SETRANGE("Customer No.","Account No.");
            CustLedgEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
            CustLedgEntry.GET("Applies-to Entry No.");

            RemainingAmount := CustLedgEntry."Remaining Amount";
            RemainingAmountLCY := CustLedgEntry."Remaining Amt. (LCY)";
          END;
        "Account Type"::Vendor:
          BEGIN
            VendLedgEntry.SETRANGE(Open,TRUE);
            VendLedgEntry.SETRANGE("Vendor No.","Account No.");
            VendLedgEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
            VendLedgEntry.GET("Applies-to Entry No.");

            RemainingAmount := VendLedgEntry."Remaining Amount";
            RemainingAmountLCY := VendLedgEntry."Remaining Amt. (LCY)";
          END;
      END;

      IF BankAccount.IsInLocalCurrency THEN
        "Remaining Amount" := RemainingAmountLCY
      ELSE
        "Remaining Amount" := RemainingAmount;
    END;

    LOCAL PROCEDURE UpdatePaymentDiscInfo@13();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      AppliedPaymentEntry.TRANSFERFIELDS(Rec);
      AppliedPaymentEntry.GetDiscInfo("Pmt. Disc. Due Date","Pmt. Disc. Tolerance Date","Remaining Pmt. Disc. Possible");
      IF "Remaining Pmt. Disc. Possible" = 0 THEN BEGIN
        "Pmt. Disc. Due Date" := 0D;
        "Pmt. Disc. Tolerance Date" := 0D;
      END;
    END;

    LOCAL PROCEDURE VerifyLineIsNotApplied@16();
    BEGIN
      IF Applied THEN
        ERROR(CannotChangeAppliedLineErr);
    END;

    PROCEDURE AppliesToEntryNoDrillDown@17();
    VAR
      CustLedgEntry@1005 : Record 21;
      VendLedgEntry@1004 : Record 25;
      BankAccLedgEntry@1003 : Record 271;
      GLEntry@1002 : Record 17;
    BEGIN
      IF "Applies-to Entry No." = 0 THEN
        EXIT;

      CASE "Account Type" OF
        "Account Type"::"G/L Account":
          BEGIN
            GLEntry.SETRANGE("G/L Account No.","Account No.");
            PAGE.RUNMODAL(0,GLEntry);
          END;
        "Account Type"::Customer:
          BEGIN
            CustLedgEntry.SETRANGE(Open,TRUE);
            CustLedgEntry.SETRANGE("Customer No.","Account No.");
            CustLedgEntry.GET("Applies-to Entry No.");
            PAGE.RUNMODAL(0,CustLedgEntry);
          END;
        "Account Type"::Vendor:
          BEGIN
            VendLedgEntry.SETRANGE(Open,TRUE);
            VendLedgEntry.SETRANGE("Vendor No.","Account No.");
            VendLedgEntry.GET("Applies-to Entry No.");
            PAGE.RUNMODAL(0,VendLedgEntry);
          END;
        "Account Type"::"Bank Account":
          BEGIN
            BankAccLedgEntry.SETRANGE(Open,TRUE);
            BankAccLedgEntry.SETRANGE("Bank Account No.","Account No.");
            BankAccLedgEntry.GET("Applies-to Entry No.");
            PAGE.RUNMODAL(0,BankAccLedgEntry);
          END;
      END;
    END;

    LOCAL PROCEDURE CrMemoSelectedToApply@18();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      AddFilterOnAppliedPmtEntry(AppliedPaymentEntry);
      IF AppliedPaymentEntry.COUNT > 0 THEN BEGIN
        AppliedPaymentEntry.SETRANGE("Document Type","Document Type"::"Credit Memo");
        IF AppliedPaymentEntry.COUNT = 0 THEN
          MESSAGE(WantToApplyCreditMemoAndInvoicesMsg);
      END;
    END;

    LOCAL PROCEDURE AddFilterOnAppliedPmtEntry@22(VAR AppliedPaymentEntry@1001 : Record 1294);
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");
    END;

    BEGIN
    END.
  }
}

