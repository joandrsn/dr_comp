OBJECT Codeunit 1266 Encryption Management
{
  OBJECT-PROPERTIES
  {
    Date=15-09-15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExportEncryptionKeyFileDialogTxt@1000 : TextConst 'DAN=Vælg den placering, hvor du vil gemme krypteringsnøglen.;ENU=Choose the location where you want to save the encryption key.';
      ExportEncryptionKeyConfirmQst@1006 : TextConst 'DAN=Filen med krypteringsnøglen skal være beskyttet med en adgangskode og gemmes på en sikker placering.\\Vil du gemme krypteringsnøglen?;ENU=The encryption key file must be protected by a password and stored in a safe location.\\Do you want to save the encryption key?';
      FileImportCaptionMsg@1008 : TextConst 'DAN=Vælg en nøglefil, der skal importeres.;ENU=Select a key file to import.';
      DefaultEncryptionKeyFileNameTxt@1009 : TextConst 'DAN=EncryptionKey.key;ENU=EncryptionKey.key';
      EncryptionKeyFilExtnTxt@1010 : TextConst 'DAN=.key;ENU=.key';
      KeyFileFilterTxt@1012 : TextConst 'DAN=Nøglefil(*.key)|*.key;ENU=Key File(*.key)|*.key';
      ReencryptConfirmQst@1013 : TextConst 'DAN=Krypteringen er allerede aktiveret. Hvis du fortsætter, bliver de krypterede data dekrypteret og krypteret igen med den nye nøgle.\\Vil du fortsætte?;ENU=The encryption is already enabled. Continuing will decrypt the encrypted data and encrypt it again with the new key.\\Do you want to continue?';
      EncryptionKeyImportedMsg@1014 : TextConst 'DAN=Nøglen blev importeret.;ENU=Key was imported successfully.';
      EnableEncryptionConfirmTxt@1015 : TextConst 'DAN=Hvis du aktiverer kryptering, genereres der en krypteringsnøgle på serveren.\Det anbefales, at du gemmer en kopi af krypteringsnøglen på en sikker placering.\\Vil du fortsætte?;ENU=Enabling encryption will generate an encryption key on the server.\It is recommended that you save a copy of the encryption key in a safe location.\\Do you want to continue?';
      DisableEncryptionConfirmQst@1016 : TextConst 'DAN=Hvis du deaktiverer kryptering, bliver de krypterede data dekrypteret og gemt i databasen på en måde, der ikke er sikker.\\Vil du fortsætte?;ENU=Disabling encryption will decrypt the encrypted data and store it in the database in an unsecure way.\\Do you want to continue?';
      EncryptionCheckFailErr@1017 : TextConst 'DAN=Kryptering er enten ikke aktiveret, eller krypteringsnøglen blev ikke fundet.;ENU=Encryption is either not enabled or the encryption key cannot be found.';
      GlblSilentFileUploadDownload@1011 : Boolean;
      GlblTempClientFileName@1018 : Text;
      FileNameNotSetForSilentUploadErr@1019 : TextConst 'DAN=Der er ikke angivet et filnavn til uovervåget upload.;ENU=A file name was not specified for silent upload.';
      DeleteEncryptedDataConfirmQst@1002 : TextConst 'DAN=Hvis du fortsætter med denne handling, bliver alle de data, der er krypteret, slettet og går tabt.\Er du sikker på, at du vil slette alle krypterede data?;ENU=If you continue with this action all data that is encrypted will be deleted and lost.\Are you sure you want to delete all encrypted data?';

    PROCEDURE Encrypt@1(Text@1000 : Text) : Text;
    BEGIN
      AssertEncryptionPossible;
      EXIT(ENCRYPT(Text));
    END;

    PROCEDURE Decrypt@5(Text@1000 : Text) : Text;
    BEGIN
      AssertEncryptionPossible;
      EXIT(DECRYPT(Text))
    END;

    PROCEDURE ExportKey@4();
    VAR
      StdPasswordDialog@1000 : Page 9815;
      ServerFilename@1001 : Text;
    BEGIN
      AssertEncryptionPossible;

      IF CONFIRM(ExportEncryptionKeyConfirmQst,TRUE) THEN BEGIN
        StdPasswordDialog.EnableBlankPassword(FALSE);
        IF StdPasswordDialog.RUNMODAL <> ACTION::OK THEN
          EXIT;
        ServerFilename := EXPORTENCRYPTIONKEY(StdPasswordDialog.GetPasswordValue);
        DownloadFile(ServerFilename);
      END;
    END;

    PROCEDURE ImportKey@3();
    VAR
      FileManagement@1003 : Codeunit 419;
      StdPasswordDialog@1002 : Page 9815;
      TempKeyFilePath@1000 : Text;
    BEGIN
      IF ENCRYPTIONENABLED THEN BEGIN
        ChangeKey;
        EXIT;
      END;

      TempKeyFilePath := UploadFile;

      // TempKeyFilePath is '' if the used cancelled the Upload file dialog.
      IF TempKeyFilePath = '' THEN
        EXIT;

      StdPasswordDialog.EnableGetPasswordMode(FALSE);
      StdPasswordDialog.DisablePasswordConfirmation;
      IF StdPasswordDialog.RUNMODAL = ACTION::OK THEN
        ImportKeyAndEncryptData(TempKeyFilePath,StdPasswordDialog.GetPasswordValue);

      FileManagement.DeleteServerFile(TempKeyFilePath);
    END;

    PROCEDURE ChangeKey@15();
    VAR
      FileManagement@1000 : Codeunit 419;
      StdPasswordDialog@1001 : Page 9815;
      TempKeyFilePath@1002 : Text;
    BEGIN
      TempKeyFilePath := UploadFile;

      // TempKeyFilePath is '' if the used cancelled the Upload file dialog.
      IF TempKeyFilePath = '' THEN
        EXIT;

      StdPasswordDialog.EnableGetPasswordMode(FALSE);
      StdPasswordDialog.DisablePasswordConfirmation;
      IF StdPasswordDialog.RUNMODAL = ACTION::OK THEN BEGIN
        IF IsEncryptionEnabled THEN BEGIN
          IF NOT CONFIRM(ReencryptConfirmQst,TRUE) THEN
            EXIT;
          DisableEncryption(TRUE);
        END;

        ImportKeyAndEncryptData(TempKeyFilePath,StdPasswordDialog.GetPasswordValue);
      END;

      FileManagement.DeleteServerFile(TempKeyFilePath);
    END;

    PROCEDURE EnableEncryption@2();
    BEGIN
      IF CONFIRM(EnableEncryptionConfirmTxt,TRUE) THEN BEGIN
        CREATEENCRYPTIONKEY;
        ExportKey;
        IF NOT EncryptDataInAllCompanies THEN BEGIN
          DELETEENCRYPTIONKEY;
          ERROR(GETLASTERRORTEXT);
        END;
      END;
    END;

    PROCEDURE DisableEncryption@7(Silent@1000 : Boolean);
    BEGIN
      // Silent is FALSE when we want the user to take action on if the encryption should be disabled or not. In cases like import key
      // Silent should be TRUE as disabling encryption is a must before importing a new key, else data will be lost.
      IF NOT Silent THEN
        IF NOT CONFIRM(DisableEncryptionConfirmQst,TRUE) THEN
          EXIT;

      DecryptDataInAllCompanies;
      DELETEENCRYPTIONKEY;
    END;

    PROCEDURE DeleteEncryptedDataInAllCompanies@14();
    VAR
      Company@1000 : Record 2000000006;
    BEGIN
      IF CONFIRM(DeleteEncryptedDataConfirmQst) THEN BEGIN
        Company.FINDSET;
        REPEAT
          DeleteServicePasswordData(Company.Name);
        UNTIL Company.NEXT = 0;
        DELETEENCRYPTIONKEY;
      END;
    END;

    PROCEDURE IsEncryptionEnabled@20() : Boolean;
    BEGIN
      EXIT(ENCRYPTIONENABLED);
    END;

    PROCEDURE IsEncryptionPossible@27() : Boolean;
    BEGIN
      // ENCRYPTIONKEYEXISTS checks if the correct key is present, which only works if encryption is enabled
      EXIT(ENCRYPTIONKEYEXISTS);
    END;

    LOCAL PROCEDURE AssertEncryptionPossible@6();
    BEGIN
      IF NOT IsEncryptionEnabled THEN
        ERROR(EncryptionCheckFailErr);
    END;

    [TryFunction]
    LOCAL PROCEDURE EncryptDataInAllCompanies@11();
    VAR
      Company@1000 : Record 2000000006;
    BEGIN
      Company.FINDSET;
      REPEAT
        EncryptServicePasswordData(Company.Name);
      UNTIL Company.NEXT = 0;
    END;

    LOCAL PROCEDURE DecryptDataInAllCompanies@12();
    VAR
      Company@1000 : Record 2000000006;
    BEGIN
      Company.FINDSET;
      REPEAT
        DecryptServicePasswordData(Company.Name);
      UNTIL Company.NEXT = 0;
    END;

    LOCAL PROCEDURE EncryptServicePasswordData@8(CompanyName@1001 : Text[30]);
    VAR
      ServicePassword@1000 : Record 1261;
      InStream@1004 : InStream;
      UnencryptedText@1006 : Text;
    BEGIN
      ServicePassword.CHANGECOMPANY(CompanyName);
      IF ServicePassword.FINDSET THEN
        REPEAT
          ServicePassword.CALCFIELDS(Value);
          ServicePassword.Value.CREATEINSTREAM(InStream);
          InStream.READTEXT(UnencryptedText);

          CLEAR(ServicePassword.Value);
          ServicePassword.SavePassword(UnencryptedText);
          ServicePassword.MODIFY;
        UNTIL ServicePassword.NEXT = 0;
    END;

    LOCAL PROCEDURE DecryptServicePasswordData@9(CompanyName@1001 : Text[30]);
    VAR
      ServicePassword@1000 : Record 1261;
      OutStream@1005 : OutStream;
      EncryptedText@1006 : Text;
    BEGIN
      ServicePassword.CHANGECOMPANY(CompanyName);
      IF ServicePassword.FINDSET THEN
        REPEAT
          EncryptedText := ServicePassword.GetPassword;

          CLEAR(ServicePassword.Value);
          ServicePassword.Value.CREATEOUTSTREAM(OutStream);
          OutStream.WRITETEXT(EncryptedText);
          ServicePassword.MODIFY;
        UNTIL ServicePassword.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteServicePasswordData@16(CompanyName@1001 : Text[30]);
    VAR
      ServicePassword@1000 : Record 1261;
    BEGIN
      ServicePassword.CHANGECOMPANY(CompanyName);
      IF ServicePassword.FINDSET THEN
        REPEAT
          CLEAR(ServicePassword.Value);
          ServicePassword.MODIFY;
        UNTIL ServicePassword.NEXT = 0;
    END;

    LOCAL PROCEDURE UploadFile@17() : Text;
    VAR
      FileManagement@1000 : Codeunit 419;
    BEGIN
      IF GlblSilentFileUploadDownload THEN BEGIN
        IF GlblTempClientFileName = '' THEN
          ERROR(FileNameNotSetForSilentUploadErr);
        EXIT(FileManagement.UploadFileSilent(GlblTempClientFileName));
      END;

      EXIT(FileManagement.UploadFileWithFilter(FileImportCaptionMsg,
          DefaultEncryptionKeyFileNameTxt,KeyFileFilterTxt,EncryptionKeyFilExtnTxt));
    END;

    LOCAL PROCEDURE DownloadFile@18(ServerFileName@1001 : Text);
    VAR
      FileManagement@1000 : Codeunit 419;
    BEGIN
      IF GlblSilentFileUploadDownload THEN
        GlblTempClientFileName := FileManagement.DownloadTempFile(ServerFileName)
      ELSE
        FileManagement.DownloadHandler(ServerFileName,ExportEncryptionKeyFileDialogTxt,
          '',KeyFileFilterTxt,DefaultEncryptionKeyFileNameTxt);
    END;

    PROCEDURE SetSilentFileUploadDownload@10(IsSilent@1000 : Boolean;SilentFileUploadName@1001 : Text);
    BEGIN
      GlblSilentFileUploadDownload := IsSilent;
      GlblTempClientFileName := SilentFileUploadName;
    END;

    PROCEDURE GetGlblTempClientFileName@13() : Text;
    BEGIN
      EXIT(GlblTempClientFileName);
    END;

    LOCAL PROCEDURE ImportKeyAndEncryptData@21(KeyFilePath@1000 : Text;Password@1002 : Text);
    BEGIN
      IMPORTENCRYPTIONKEY(KeyFilePath,Password);
      IF NOT EncryptDataInAllCompanies THEN BEGIN
        DELETEENCRYPTIONKEY;
        ERROR(GETLASTERRORTEXT);
      END;
      MESSAGE(EncryptionKeyImportedMsg);
    END;

    BEGIN
    END.
  }
}

