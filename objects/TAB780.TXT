OBJECT Table 780 Certificate of Supply
{
  OBJECT-PROPERTIES
  {
    Date=15-09-15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Leveringscertifikat;
               ENU=Certificate of Supply];
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[DAN=Bilagstype;
                                                              ENU=Document Type];
                                                   OptionCaptionML=[DAN=Salgsleverance,Serviceleverance,Returvareleverance;
                                                                    ENU=Sales Shipment,Service Shipment,Return Shipment];
                                                   OptionString=Sales Shipment,Service Shipment,Return Shipment }
    { 2   ;   ;Document No.        ;Code20        ;TableRelation=IF (Document Type=FILTER(Sales Shipment)) "Sales Shipment Header".No.
                                                                 ELSE IF (Document Type=FILTER(Service Shipment)) "Service Shipment Header".No.
                                                                 ELSE IF (Document Type=FILTER(Return Shipment)) "Return Shipment Header".No.;
                                                   CaptionML=[DAN=Bilagsnr.;
                                                              ENU=Document No.] }
    { 3   ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF xRec.Status = Status THEN
                                                                  EXIT;

                                                                IF  "No." = '' THEN
                                                                  "No." := "Document No.";

                                                                IF Status = Status::Received THEN
                                                                  "Receipt Date" := WORKDATE
                                                                ELSE
                                                                  "Receipt Date" := 0D;

                                                                IF Status = Status::"Not Applicable" THEN
                                                                  "No." := ''
                                                              END;

                                                   CaptionML=[DAN=Status;
                                                              ENU=Status];
                                                   OptionCaptionML=[DAN=Ikke tilgængelig,Påkrævet,Modtaget,Ikke modtaget;
                                                                    ENU=Not Applicable,Required,Received,Not Received];
                                                   OptionString=Not Applicable,Required,Received,Not Received }
    { 4   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF Status = Status::"Not Applicable" THEN BEGIN
                                                                  IF "No." <> '' THEN
                                                                    ERROR(NoCannotBeEnteredErr);
                                                                END ELSE
                                                                  IF "No." = '' THEN
                                                                    ERROR(NoCannotBeEmptyErr)
                                                              END;

                                                   CaptionML=[DAN=Nummer;
                                                              ENU=No.] }
    { 5   ;   ;Receipt Date        ;Date          ;OnValidate=BEGIN
                                                                CheckRcptDate
                                                              END;

                                                   CaptionML=[DAN=Modtagelsesdato;
                                                              ENU=Receipt Date] }
    { 6   ;   ;Printed             ;Boolean       ;CaptionML=[DAN=Udskrevet;
                                                              ENU=Printed] }
    { 7   ;   ;Customer/Vendor Name;Text50        ;CaptionML=[DAN=Debitor-/kreditornavn;
                                                              ENU=Customer/Vendor Name];
                                                   Editable=No }
    { 8   ;   ;Shipment Method Code;Code10        ;CaptionML=[DAN=Leveringskode;
                                                              ENU=Shipment Method Code];
                                                   Editable=No }
    { 9   ;   ;Shipment/Posting Date;Date         ;CaptionML=[DAN=Afsendelses-/bogføringsdato;
                                                              ENU=Shipment/Posting Date];
                                                   Editable=No }
    { 10  ;   ;Ship-to Country/Region Code;Code10 ;CaptionML=[DAN=Lande-/områdekode for levering;
                                                              ENU=Ship-to Country/Region Code];
                                                   Editable=No }
    { 11  ;   ;Customer/Vendor No. ;Code20        ;CaptionML=[DAN=Debitor-/kreditornr.;
                                                              ENU=Customer/Vendor No.] }
    { 12  ;   ;Vehicle Registration No.;Text20    ;OnValidate=BEGIN
                                                                IF (Status = Status::Received) AND ("Vehicle Registration No." <> xRec."Vehicle Registration No.") THEN
                                                                  ERROR(STRSUBSTNO(VehicleRegNoCannotBeChangedErr,FIELDCAPTION("Vehicle Registration No."),Status::Received))
                                                              END;

                                                   CaptionML=[DAN=Køretøjets registreringsnummer;
                                                              ENU=Vehicle Registration No.] }
  }
  KEYS
  {
    {    ;Document Type,Document No.              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecDateCannotBeEmptyErr@1000 : TextConst 'DAN=Modtagelsesdato må ikke være tom, når Status er Modtaget.;ENU=The Receipt Date cannot be empty when Status is Received.';
      RecDateCannotBeEnteredErr@1001 : TextConst 'DAN=Du kan kun angive modtagelsesdatoen, hvis status for leveringscertifikatet er Modtaget.;ENU=You can enter the Receipt Date only if the status of the Certificate of Supply is Received.';
      CertRecDateBeforeShipmPostDateErr@1003 : TextConst 'DAN=Certifikatets modtagelsesdato må ikke ligge før afsendelses-/bogføringsdatoen.;ENU=The Receipt Date of the certificate cannot be earlier than the Shipment/Posting Date.';
      NoCannotBeEnteredErr@1002 : TextConst 'DAN=Feltet Nr. kan ikke udfyldes, når status for leveringscertifikatet er angivet til Ikke tilgængelig.;ENU=The No. field cannot be filled in when the status of the Certificate of Supply is set to Not Applicable.';
      NoCannotBeEmptyErr@1004 : TextConst 'DAN=Feltet Nr. må ikke være tomt, når status for leveringscertifikatet er angivet til Påkrævet, Modtaget eller Ikke modtaget.;ENU=The No. field cannot be empty when the status of the Certificate of Supply is set to Required, Received, or Not Received.';
      VehicleRegNoCannotBeChangedErr@1005 : TextConst 'DAN=Feltet %1 kan ikke ændres, når status for leveringscertifikatet er angivet til %2.;ENU=The %1 field cannot be changed when the status of the Certificate of Supply is set to %2.';

    PROCEDURE Print@1();
    BEGIN
      REPORT.RUNMODAL(REPORT::"Certificate of Supply",TRUE,FALSE,Rec);
    END;

    PROCEDURE SetPrintedTrue@2();
    BEGIN
      IF Status = Status::"Not Applicable" THEN
        SetRequired("Document No.");
      Printed := TRUE;

      MODIFY;
    END;

    PROCEDURE SetRequired@3(CertificateNo@1000 : Code[20]);
    BEGIN
      Status := Status::Required;
      "No." := CertificateNo;
      "Receipt Date" := 0D;
      MODIFY
    END;

    LOCAL PROCEDURE CheckRcptDate@37();
    BEGIN
      IF Status = Status::Received THEN BEGIN
        IF "Receipt Date" = 0D THEN
          ERROR(RecDateCannotBeEmptyErr);
        IF "Shipment/Posting Date" > "Receipt Date" THEN
          ERROR(CertRecDateBeforeShipmPostDateErr);
      END ELSE
        IF "Receipt Date" <> 0D THEN
          ERROR(RecDateCannotBeEnteredErr);
    END;

    PROCEDURE InitFromSales@11(VAR SalesShipmentHeader@1000 : Record 110);
    BEGIN
      IF NOT GET("Document Type"::"Sales Shipment",SalesShipmentHeader."No.") THEN BEGIN
        INIT;
        "Document Type" := "Document Type"::"Sales Shipment";
        "Document No." := SalesShipmentHeader."No.";
        "Customer/Vendor Name" := SalesShipmentHeader."Ship-to Name";
        "Shipment Method Code" := SalesShipmentHeader."Shipment Method Code";
        "Shipment/Posting Date" := SalesShipmentHeader."Shipment Date";
        "Ship-to Country/Region Code" := SalesShipmentHeader."Ship-to Country/Region Code";
        "Customer/Vendor No." := SalesShipmentHeader."Bill-to Customer No.";
        INSERT(TRUE);
      END
    END;

    PROCEDURE InitFromPurchase@10(VAR ReturnShipmentHeader@1000 : Record 6650);
    BEGIN
      IF NOT GET("Document Type"::"Return Shipment",ReturnShipmentHeader."No.") THEN BEGIN
        INIT;
        "Document Type" := "Document Type"::"Return Shipment";
        "Document No." := ReturnShipmentHeader."No.";
        "Customer/Vendor Name" := ReturnShipmentHeader."Ship-to Name";
        "Shipment Method Code" := ReturnShipmentHeader."Shipment Method Code";
        "Shipment/Posting Date" := ReturnShipmentHeader."Posting Date";
        "Ship-to Country/Region Code" := ReturnShipmentHeader."Ship-to Country/Region Code";
        "Customer/Vendor No." := ReturnShipmentHeader."Pay-to Vendor No.";
        INSERT(TRUE);
      END
    END;

    PROCEDURE InitFromService@5(VAR ServiceShipmentHeader@1000 : Record 5990);
    BEGIN
      IF NOT GET("Document Type"::"Service Shipment",ServiceShipmentHeader."No.") THEN BEGIN
        INIT;
        "Document Type" := "Document Type"::"Service Shipment";
        "Document No." := ServiceShipmentHeader."No.";
        "Customer/Vendor Name" := ServiceShipmentHeader."Ship-to Name";
        "Shipment Method Code" := '';
        "Shipment/Posting Date" := ServiceShipmentHeader."Posting Date";
        "Ship-to Country/Region Code" := ServiceShipmentHeader."Ship-to Country/Region Code";
        "Customer/Vendor No." := ServiceShipmentHeader."Bill-to Customer No.";
        INSERT(TRUE);
      END
    END;

    PROCEDURE InitRecord@4(DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    VAR
      SalesShipmentHeader@1004 : Record 110;
      ServiceShipmentHeader@1003 : Record 5990;
      ReturnShipmentHeader@1002 : Record 6650;
    BEGIN
      CASE DocumentType OF
        "Document Type"::"Sales Shipment":
          BEGIN
            SalesShipmentHeader.GET(DocumentNo);
            InitFromSales(SalesShipmentHeader);
          END;
        "Document Type"::"Service Shipment":
          BEGIN
            ServiceShipmentHeader.GET(DocumentNo);
            InitFromService(ServiceShipmentHeader);
          END;
        "Document Type"::"Return Shipment":
          BEGIN
            ReturnShipmentHeader.GET(DocumentNo);
            InitFromPurchase(ReturnShipmentHeader);
          END;
      END
    END;

    BEGIN
    END.
  }
}

