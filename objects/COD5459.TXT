OBJECT Codeunit 5459 JSON Management
{
  OBJECT-PROPERTIES
  {
    Date=29-11-18;
    Time=12:00:00;
    Version List=NAVW19.00.00.50785;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JsonObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      IEnumerator@1002 : DotNet "'mscorlib'.System.Collections.Generic.IEnumerator`1";

    PROCEDURE InitializeObject@36(JSONString@1000 : Text);
    BEGIN
      InitializeObjectFromString(JSONString);
    END;

    PROCEDURE InitializeEmptyObject@62();
    BEGIN
      JsonObject := JsonObject.JObject;
    END;

    LOCAL PROCEDURE InitializeObjectFromString@37(JSONString@1000 : Text);
    BEGIN
      CLEAR(JsonObject);
      IF JSONString <> '' THEN
        JsonObject := JsonObject.Parse(JSONString)
      ELSE
        InitializeEmptyObject;
    END;

    PROCEDURE InitializeFromString@49(JSONString@1000 : Text) : Boolean;
    BEGIN
      CLEAR(JsonObject);
      IF JSONString <> '' THEN
        EXIT(TryParseJObjectFromString(JsonObject,JSONString));

      InitializeEmptyObject;
      EXIT(TRUE);
    END;

    PROCEDURE GetPropertyValueFromJObjectByPathSetToFieldRef@28(JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyPath@1001 : Text;VAR FieldRef@1000 : FieldRef) : Boolean;
    VAR
      OutlookSynchTypeConv@1011 : Codeunit 5302;
      JProperty@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      Value@1005 : Variant;
      DecimalVal@1004 : Decimal;
      BoolVal@1007 : Boolean;
      GuidVal@1008 : GUID;
      DateVal@1009 : Date;
      Success@1006 : Boolean;
      IntVar@1010 : Integer;
    BEGIN
      Success := FALSE;
      JProperty := JObject.SelectToken(propertyPath);

      IF ISNULL(JProperty) THEN
        EXIT(FALSE);

      Value := FORMAT(JProperty.Value,0,9);

      CASE FORMAT(FieldRef.TYPE) OF
        'Integer',
        'Decimal':
          BEGIN
            Success := EVALUATE(DecimalVal,Value,9);
            FieldRef.VALUE(DecimalVal);
          END;
        'Date':
          BEGIN
            Success := EVALUATE(DateVal,Value,9);
            FieldRef.VALUE(DateVal);
          END;
        'Boolean':
          BEGIN
            Success := EVALUATE(BoolVal,Value,9);
            FieldRef.VALUE(BoolVal);
          END;
        'GUID':
          BEGIN
            Success := EVALUATE(GuidVal,Value);
            FieldRef.VALUE(GuidVal);
          END;
        'Text',
        'Code':
          BEGIN
            FieldRef.VALUE(COPYSTR(Value,1,FieldRef.LENGTH));
            Success := TRUE;
          END;
        'Option':
          BEGIN
            IF NOT EVALUATE(IntVar,Value) THEN
              IntVar := OutlookSynchTypeConv.TextToOptionValue(Value,FieldRef.OPTIONCAPTION);
            IF IntVar >= 0 THEN BEGIN
              FieldRef.VALUE := IntVar;
              Success := TRUE;
            END;
          END;
      END;

      EXIT(Success);
    END;

    PROCEDURE AddJPropertyToJObject@3(VAR JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1000 : Text;value@1003 : Variant);
    VAR
      JObject2@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JProperty@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      ValueText@1004 : Text;
    BEGIN
      CASE TRUE OF
        value.ISDOTNET:
          BEGIN
            JObject2 := value;
            JObject.Add(propertyName,JObject2);
          END;
        value.ISINTEGER,
        value.ISDECIMAL,
        value.ISBOOLEAN:
          BEGIN
            JProperty := JProperty.JProperty(propertyName,value);
            JObject.Add(JProperty);
          END;
        ELSE BEGIN
          ValueText := FORMAT(value,0,9);
          JProperty := JProperty.JProperty(propertyName,ValueText);
          JObject.Add(JProperty);
        END;
      END;
    END;

    PROCEDURE ReplaceOrAddJPropertyInJObject@44(VAR JObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1001 : Text;value@1002 : Variant) : Boolean;
    VAR
      JProperty@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      OldProperty@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
      oldValue@1004 : Variant;
    BEGIN
      JProperty := JObject.Property(propertyName);
      IF NOT ISNULL(JProperty) THEN BEGIN
        OldProperty := JObject.Property(propertyName);
        oldValue := OldProperty.Value;
        JProperty.Replace(JProperty.JProperty(propertyName,value));
        EXIT(FORMAT(oldValue) <> FORMAT(value));
      END;

      AddJPropertyToJObject(JObject,propertyName,value);
      EXIT(TRUE);
    END;

    PROCEDURE ReplaceOrAddDescendantJPropertyInJObject@5(VAR JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";fullyQualifiedPropertyName@1003 : Text;value@1000 : Variant) : Boolean;
    VAR
      containerJObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      propertyName@1006 : Text;
    BEGIN
      DecomposeQualifiedPathToContainerObjectAndPropertyName(JObject,fullyQualifiedPropertyName,containerJObject,propertyName);
      EXIT(ReplaceOrAddJPropertyInJObject(containerJObject,propertyName,value));
    END;

    PROCEDURE WriteObjectToString@63() : Text;
    BEGIN
      IF NOT ISNULL(JsonObject) THEN
        EXIT(JsonObject.ToString);
    END;

    LOCAL PROCEDURE GetLastIndexOfPeriod@31(String@1000 : Text) LastIndex : Integer;
    VAR
      Index@1001 : Integer;
    BEGIN
      Index := STRPOS(String,'.');
      LastIndex := Index;
      WHILE Index > 0 DO BEGIN
        String := COPYSTR(String,Index + 1);
        Index := STRPOS(String,'.');
        LastIndex += Index;
      END;
    END;

    LOCAL PROCEDURE GetSubstringToLastPeriod@33(String@1000 : Text) : Text;
    VAR
      Index@1001 : Integer;
    BEGIN
      Index := GetLastIndexOfPeriod(String);
      IF Index > 0 THEN
        EXIT(COPYSTR(String,1,Index - 1));
    END;

    LOCAL PROCEDURE DecomposeQualifiedPathToContainerObjectAndPropertyName@8(VAR JObject@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";fullyQualifiedPropertyName@1000 : Text;VAR containerJObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR propertyName@1001 : Text);
    VAR
      containerJToken@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
      containingPath@1005 : Text;
    BEGIN
      CLEAR(containerJObject);
      propertyName := '';

      containingPath := GetSubstringToLastPeriod(fullyQualifiedPropertyName);
      containerJToken := JObject.SelectToken(containingPath);
      IF ISNULL(containerJToken) THEN BEGIN
        DecomposeQualifiedPathToContainerObjectAndPropertyName(JObject,containingPath,containerJObject,propertyName);
        containerJObject.Add(propertyName,JObject.JObject);
        containerJToken := JObject.SelectToken(containingPath);
      END;

      containerJObject := containerJToken;
      IF containingPath <> '' THEN
        propertyName := COPYSTR(fullyQualifiedPropertyName,STRLEN(containingPath) + 2)
      ELSE
        propertyName := fullyQualifiedPropertyName;
    END;

    [TryFunction]
    PROCEDURE TryParseJObjectFromString@39(VAR JObject@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";StringToParse@1000 : Variant);
    BEGIN
      JObject := JObject.Parse(FORMAT(StringToParse));
    END;

    PROCEDURE SetValue@47(Path@1001 : Text;Value@1002 : Variant);
    BEGIN
      IF ISNULL(JsonObject) THEN
        InitializeEmptyObject;
      ReplaceOrAddDescendantJPropertyInJObject(JsonObject,Path,Value);
    END;

    PROCEDURE GetValue@146(Path@1001 : Text) : Text;
    VAR
      SelectedJToken@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JToken";
    BEGIN
      IF ISNULL(JsonObject) THEN
        EXIT('');

      SelectedJToken := JsonObject.SelectToken(Path);
      IF NOT ISNULL(SelectedJToken) THEN
        EXIT(SelectedJToken.ToString);
    END;

    PROCEDURE GetValueAndSetToRecFieldNo@155(RecordRef@1003 : RecordRef;PropertyPath@1001 : Text;FieldNo@1004 : Integer) : Boolean;
    VAR
      FieldRef@1000 : FieldRef;
    BEGIN
      IF ISNULL(JsonObject) THEN
        EXIT(FALSE);

      FieldRef := RecordRef.FIELD(FieldNo);
      EXIT(GetPropertyValueFromJObjectByPathSetToFieldRef(JsonObject,PropertyPath,FieldRef));
    END;

    PROCEDURE HasValue@145(Name@1000 : Text;Value@1001 : Text) : Boolean;
    BEGIN
      IF NOT ISNULL(JsonObject) THEN
        EXIT(STRPOS(GetValue(Name),Value) = 1);
    END;

    PROCEDURE AddJson@50(Path@1000 : Text;JsonString@1001 : Text);
    VAR
      JObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      IF JsonString <> '' THEN
        IF TryParseJObjectFromString(JObject,JsonString) THEN
          SetValue(Path,JObject);
    END;

    PROCEDURE SelectTokenFromRoot@52(Path@1000 : Text) : Boolean;
    BEGIN
      IF ISNULL(JsonObject) THEN
        EXIT(FALSE);

      JsonObject := JsonObject.Root;
      JsonObject := JsonObject.SelectToken(Path);
      EXIT(NOT ISNULL(JsonObject));
    END;

    PROCEDURE ReadProperties@55() : Boolean;
    VAR
      IEnumerable@1000 : DotNet "'mscorlib'.System.Collections.Generic.IEnumerable`1";
    BEGIN
      IF NOT JsonObject.HasValues THEN
        EXIT(FALSE);

      IEnumerable := JsonObject.Properties;
      IEnumerator := IEnumerable.GetEnumerator;
      EXIT(TRUE);
    END;

    PROCEDURE GetNextProperty@58(VAR Name@1001 : Text;VAR Value@1002 : Text) : Boolean;
    VAR
      JProperty@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JProperty";
    BEGIN
      Name := '';
      Value := '';

      IF NOT IEnumerator.MoveNext THEN
        EXIT(FALSE);

      JProperty := IEnumerator.Current;
      IF ISNULL(JProperty) THEN
        EXIT(FALSE);

      Name := JProperty.Name;
      Value := FORMAT(JProperty.Value);
      EXIT(TRUE);
    END;

    PROCEDURE SelectItemFromRoot@53(Path@1001 : Text;Index@1000 : Integer) : Boolean;
    BEGIN
      IF SelectTokenFromRoot(Path) THEN
        JsonObject := JsonObject.Item(Index);
      EXIT(NOT ISNULL(JsonObject));
    END;

    PROCEDURE GetCount@59() : Integer;
    BEGIN
      IF NOT ISNULL(JsonObject) THEN
        EXIT(JsonObject.Count);
    END;

    PROCEDURE SetJsonWebResponseError@56(VAR JsonString@1000 : Text;code@1002 : Text;name@1003 : Text;description@1004 : Text);
    BEGIN
      IF InitializeFromString(JsonString) THEN BEGIN
        SetValue('Error.code',code);
        SetValue('Error.name',name);
        SetValue('Error.description',description);
        JsonString := WriteObjectToString;
      END;
    END;

    PROCEDURE GetJsonWebResponseError@41(JsonString@1000 : Text;VAR code@1002 : Text;VAR name@1003 : Text;VAR description@1004 : Text) : Boolean;
    BEGIN
      IF InitializeFromString(JsonString) THEN BEGIN
        code := GetValue('Error.code');
        name := GetValue('Error.name');
        description := GetValue('Error.description');
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

