OBJECT Codeunit 1520 Workflow Event Handling
{
  OBJECT-PROPERTIES
  {
    Date=23-10-15;
    Time=12:00:00;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      IncDocReleasedEventDescTxt@1040 : TextConst 'DAN=Et indgående bilag frigives.;ENU=An incoming document is released.';
      CreateDocFromIncDocSuccessfulEventDescTxt@1041 : TextConst 'DAN=Oprettelse af et bilag fra et indgående bilag lykkes.;ENU=Creating a document from an incoming document is successful.';
      CreateDocFromIncDocFailsEventDescTxt@1033 : TextConst 'DAN=Oprettelse af et bilag fra et indgående bilag mislykkes.;ENU=Creating a document from an incoming document fails.';
      IncDocCreatedEventDescTxt@1005 : TextConst 'DAN=Der oprettes et indgående dokument.;ENU=An incoming document is created.';
      IncDocIsReadyForOCREventDescTxt@1034 : TextConst 'DAN=Et indgående bilag er klar til OCR.;ENU=An incoming document is ready for OCR.';
      IncDocIsSentForOCREventDescTxt@1042 : TextConst 'DAN=Et indgående bilag er sendt til OCR.;ENU=An incoming document is sent for OCR.';
      IncDocIsReceivedFromOCREventDescTxt@1043 : TextConst 'DAN=Et indgående bilag fra OCR modtages.;ENU=An incoming document is received from OCR.';
      IncDocIsReceivedFromDocExchEventDescTxt@1044 : TextConst 'DAN=Et indgående bilag modtages fra dokumentudveksling.;ENU=An incoming document is received from document exchange.';
      IncDocSendForApprovalEventDescTxt@1011 : TextConst 'DAN=Der anmodes om godkendelse af et indgående bilag.;ENU=Approval of a incoming document is requested.';
      IncDocApprReqCancelledEventDescTxt@1045 : TextConst 'DAN=En godkendelsesanmodning til et indgående bilag annulleres.;ENU=An approval request for an incoming document is canceled.';
      PurchDocSendForApprovalEventDescTxt@1004 : TextConst 'DAN=Der anmodes om godkendelse af et købsdokument.;ENU=Approval of a purchase document is requested.';
      PurchDocApprReqCancelledEventDescTxt@1007 : TextConst 'DAN=En godkendelsesanmodning til et købsdokument annulleres.;ENU=An approval request for a purchase document is canceled.';
      PurchInvPostEventDescTxt@1001 : TextConst 'DAN=En købsfaktura bogføres.;ENU=A purchase invoice is posted.';
      PurchDocReleasedEventDescTxt@1013 : TextConst 'DAN=Et købsdokument frigives.;ENU=A purchase document is released.';
      PurchInvPmtCreatedEventDescTxt@1000 : TextConst 'DAN=Der er oprettet en finanskladdelinje.;ENU=A general journal line is created.';
      ApprReqApprovedEventDescTxt@1009 : TextConst 'DAN=En anmodning om godkendelse godkendes.;ENU=An approval request is approved.';
      ApprReqRejectedEventDescTxt@1008 : TextConst 'DAN=En anmodning om godkendelse afvises.;ENU=An approval request is rejected.';
      ApprReqDelegatedEventDescTxt@1006 : TextConst 'DAN=En anmodning om godkendelse uddelegeres.;ENU=An approval request is delegated.';
      SalesDocSendForApprovalEventDescTxt@1003 : TextConst 'DAN=Der er anmodet om godkendelse af et salgsdokument.;ENU=Approval of a sales document is requested.';
      SalesDocApprReqCancelledEventDescTxt@1016 : TextConst 'DAN=En godkendelsesanmodning til et salgsdokument annulleres.;ENU=An approval request for a sales document is canceled.';
      SalesDocReleasedEventDescTxt@1002 : TextConst 'DAN=Et salgsdokument frigives.;ENU=A sales document is released.';
      EventAlreadyExistErr@1014 : TextConst 'DAN=Der findes allerede en hændelse med beskrivelsen %1.;ENU=An event with description %1 already exists.';
      SendOverdueNotifTxt@1012 : TextConst 'DAN=Kørslen med notifikationer om forfaldne godkendelser er udført.;ENU=The overdue approval notifications batch job is executed.';
      CustomerCreditLimitExceededTxt@1017 : TextConst 'DAN=En debitors kreditmaksimum er overskredet.;ENU=A customer credit limit is exceeded.';
      CustomerCreditLimitNotExceededTxt@1018 : TextConst 'DAN=En debitors kreditmaksimum er ikke overskredet.;ENU=A customer credit limit is not exceeded.';
      CustomerSendForApprovalEventDescTxt@1019 : TextConst 'DAN=Der er anmodet om godkendelse af en debitor.;ENU=Approval of a customer is requested.';
      VendorSendForApprovalEventDescTxt@1015 : TextConst 'DAN=Der anmodes om godkendelse af en kreditor.;ENU=Approval of a vendor is requested.';
      ItemSendForApprovalEventDescTxt@1024 : TextConst 'DAN=Der anmodes om godkendelse af en vare.;ENU=Approval of an item is requested.';
      CustomerApprovalRequestCancelEventDescTxt@1020 : TextConst 'DAN=En godkendelsesanmodning til en kunde annulleres.;ENU=An approval request for a customer is canceled.';
      VendorApprovalRequestCancelEventDescTxt@1029 : TextConst 'DAN=En godkendelsesanmodning til en kreditor annulleres.;ENU=An approval request for a vendor is canceled.';
      ItemApprovalRequestCancelEventDescTxt@1030 : TextConst 'DAN=En godkendelsesanmodning til en vare annulleres.;ENU=An approval request for an item is canceled.';
      WorkflowManagement@1010 : Codeunit 1501;
      GeneralJournalBatchSendForApprovalEventDescTxt@1026 : TextConst 'DAN=Der anmodes om godkendelse af en finanskladdekørsel.;ENU=Approval of a general journal batch is requested.';
      GeneralJournalBatchApprovalRequestCancelEventDescTxt@1025 : TextConst 'DAN=En godkendelsesanmodning for en finanskladdekørsel er annulleret.;ENU=An approval request for a general journal batch is canceled.';
      GeneralJournalLineSendForApprovalEventDescTxt@1028 : TextConst 'DAN=Der anmodes om godkendelse af en finanskladdelinje.;ENU=Approval of a general journal line is requested.';
      GeneralJournalLineApprovalRequestCancelEventDescTxt@1027 : TextConst 'DAN=En godkendelsesanmodning for en finanskladdelinje er annulleret.;ENU=An approval request for a general journal line is canceled.';
      GeneralJournalBatchBalancedEventDescTxt@1021 : TextConst 'DAN=En finanskladdekørsel er afstemt.;ENU=A general journal batch is balanced.';
      GeneralJournalBatchNotBalancedEventDescTxt@1022 : TextConst 'DAN=En finanskladdekørsel er ikke afstemt.;ENU=A general journal batch is not balanced.';
      ImageOrPDFIsAttachedToAnIncomingDocEventDescTxt@1091 : TextConst 'DAN=Et billede eller en pdf er vedhæftet til et nyt indgående bilag til OCR.;ENU=An image or pdf is attached to a new incoming document for OCR.';
      CustChangedTxt@1023 : TextConst 'DAN=En debitorpost er ændret.;ENU=A customer record is changed.';
      VendChangedTxt@1031 : TextConst 'DAN=En kreditorpost er ændret.;ENU=A vendor record is changed.';
      ItemChangedTxt@1032 : TextConst 'DAN=En varepost er ændret.;ENU=An item record is changed.';

    PROCEDURE CreateEventsLibrary@13();
    BEGIN
      AddEventToLibrary(
        RunWorkflowOnAfterInsertIncomingDocumentCode,DATABASE::"Incoming Document",IncDocCreatedEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReleaseIncomingDocCode,DATABASE::"Incoming Document",IncDocReleasedEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterCreateDocFromIncomingDocSuccessCode,
        DATABASE::"Incoming Document",CreateDocFromIncDocSuccessfulEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterCreateDocFromIncomingDocFailCode,DATABASE::"Incoming Document",CreateDocFromIncDocFailsEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReadyForOCRIncomingDocCode,DATABASE::"Incoming Document",IncDocIsReadyForOCREventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterSendToOCRIncomingDocCode,DATABASE::"Incoming Document",IncDocIsSentForOCREventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReceiveFromOCRIncomingDocCode,DATABASE::"Incoming Document",IncDocIsReceivedFromOCREventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnAfterReceiveFromDocExchIncomingDocCode,
        DATABASE::"Incoming Document",IncDocIsReceivedFromDocExchEventDescTxt,0,FALSE);

      AddEventToLibrary(
        RunWorkflowOnSendPurchaseDocForApprovalCode,DATABASE::"Purchase Header",PurchDocSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnSendIncomingDocForApprovalCode,DATABASE::"Incoming Document",IncDocSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(
        RunWorkflowOnCancelIncomingDocApprovalRequestCode,DATABASE::"Incoming Document",IncDocApprReqCancelledEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnCancelPurchaseApprovalRequestCode,DATABASE::"Purchase Header",
        PurchDocApprReqCancelledEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnAfterReleasePurchaseDocCode,DATABASE::"Purchase Header",
        PurchDocReleasedEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnAfterPostPurchaseDocCode,DATABASE::"Purch. Inv. Header",
        PurchInvPostEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendSalesDocForApprovalCode,DATABASE::"Sales Header",
        SalesDocSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelSalesApprovalRequestCode,DATABASE::"Sales Header",
        SalesDocApprReqCancelledEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnAfterReleaseSalesDocCode,DATABASE::"Sales Header",
        SalesDocReleasedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnAfterInsertGeneralJournalLineCode,DATABASE::"Gen. Journal Line",
        PurchInvPmtCreatedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnApproveApprovalRequestCode,DATABASE::"Approval Entry",ApprReqApprovedEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnRejectApprovalRequestCode,DATABASE::"Approval Entry",ApprReqRejectedEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnDelegateApprovalRequestCode,DATABASE::"Approval Entry",ApprReqDelegatedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendOverdueNotificationsCode,DATABASE::"Approval Entry",SendOverdueNotifTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnCustomerCreditLimitExceededCode,DATABASE::"Sales Header",
        CustomerCreditLimitExceededTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCustomerCreditLimitNotExceededCode,DATABASE::"Sales Header",
        CustomerCreditLimitNotExceededTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendCustomerForApprovalCode,DATABASE::Customer,
        CustomerSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelCustomerApprovalRequestCode,DATABASE::Customer,
        CustomerApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendVendorForApprovalCode,DATABASE::Vendor,
        VendorSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelVendorApprovalRequestCode,DATABASE::Vendor,
        VendorApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendItemForApprovalCode,DATABASE::Item,
        ItemSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelItemApprovalRequestCode,DATABASE::Item,
        ItemApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendGeneralJournalBatchForApprovalCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnSendGeneralJournalLineForApprovalCode,DATABASE::"Gen. Journal Line",
        GeneralJournalLineSendForApprovalEventDescTxt,0,FALSE);
      AddEventToLibrary(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,DATABASE::"Gen. Journal Line",
        GeneralJournalLineApprovalRequestCancelEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnGeneralJournalBatchBalancedCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchBalancedEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnGeneralJournalBatchNotBalancedCode,DATABASE::"Gen. Journal Batch",
        GeneralJournalBatchNotBalancedEventDescTxt,0,FALSE);

      AddEventToLibrary(
        RunWorkflowOnBinaryFileAttachedCode,
        DATABASE::"Incoming Document Attachment",ImageOrPDFIsAttachedToAnIncomingDocEventDescTxt,0,FALSE);

      AddEventToLibrary(RunWorkflowOnCustomerChangedCode,DATABASE::Customer,CustChangedTxt,0,TRUE);
      AddEventToLibrary(RunWorkflowOnVendorChangedCode,DATABASE::Vendor,VendChangedTxt,0,TRUE);
      AddEventToLibrary(RunWorkflowOnItemChangedCode,DATABASE::Item,ItemChangedTxt,0,TRUE);

      OnAddWorkflowEventsToLibrary;
      OnAddWorkflowTableRelationsToLibrary;
    END;

    LOCAL PROCEDURE AddEventPredecessors@67(EventFunctionName@1001 : Code[128]);
    BEGIN
      CASE EventFunctionName OF
        RunWorkflowOnAfterPostPurchaseDocCode:
          AddEventPredecessor(RunWorkflowOnAfterPostPurchaseDocCode,RunWorkflowOnAfterReleasePurchaseDocCode);
        RunWorkflowOnCancelIncomingDocApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelIncomingDocApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
        RunWorkflowOnCancelPurchaseApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelPurchaseApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
        RunWorkflowOnCancelSalesApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelSalesApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
        RunWorkflowOnCancelCustomerApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelCustomerApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
        RunWorkflowOnCancelVendorApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelVendorApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
        RunWorkflowOnCancelItemApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelItemApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
        RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,
            RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,
            RunWorkflowOnSendGeneralJournalLineForApprovalCode);
        RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode:
          AddEventPredecessor(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,
            RunWorkflowOnGeneralJournalBatchBalancedCode);
        RunWorkflowOnCustomerCreditLimitExceededCode:
          AddEventPredecessor(RunWorkflowOnCustomerCreditLimitExceededCode,RunWorkflowOnSendSalesDocForApprovalCode);
        RunWorkflowOnCustomerCreditLimitNotExceededCode:
          AddEventPredecessor(RunWorkflowOnCustomerCreditLimitNotExceededCode,RunWorkflowOnSendSalesDocForApprovalCode);
        RunWorkflowOnApproveApprovalRequestCode:
          BEGIN
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnCustomerChangedCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnVendorChangedCode);
            AddEventPredecessor(RunWorkflowOnApproveApprovalRequestCode,RunWorkflowOnItemChangedCode);
          END;
        RunWorkflowOnRejectApprovalRequestCode:
          BEGIN
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddEventPredecessor(RunWorkflowOnRejectApprovalRequestCode,RunWorkflowOnSendGeneralJournalLineForApprovalCode);
          END;
        RunWorkflowOnDelegateApprovalRequestCode:
          BEGIN
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendIncomingDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendSalesDocForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendCustomerForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendVendorForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendItemForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddEventPredecessor(RunWorkflowOnDelegateApprovalRequestCode,RunWorkflowOnSendGeneralJournalLineForApprovalCode);
          END;
        RunWorkflowOnGeneralJournalBatchBalancedCode:
          AddEventPredecessor(RunWorkflowOnGeneralJournalBatchBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        RunWorkflowOnGeneralJournalBatchNotBalancedCode:
          AddEventPredecessor(RunWorkflowOnGeneralJournalBatchNotBalancedCode,RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
      END;

      OnAddWorkflowEventPredecessorsToLibrary(EventFunctionName);
    END;

    PROCEDURE AddEventToLibrary@14(FunctionName@1001 : Code[128];TableID@1002 : Integer;Description@1003 : Text[250];RequestPageID@1004 : Integer;UsedForRecordChange@1005 : Boolean);
    VAR
      WorkflowEvent@1000 : Record 1520;
    BEGIN
      IF WorkflowEvent.GET(FunctionName) THEN
        EXIT;

      WorkflowEvent.SETRANGE(Description,Description);
      IF WorkflowEvent.FINDFIRST THEN
        ERROR(EventAlreadyExistErr,Description);

      WorkflowEvent.INIT;
      WorkflowEvent."Function Name" := FunctionName;
      WorkflowEvent."Table ID" := TableID;
      WorkflowEvent.Description := Description;
      WorkflowEvent."Request Page ID" := RequestPageID;
      WorkflowEvent."Used for Record Change" := UsedForRecordChange;
      WorkflowEvent.INSERT;

      AddEventPredecessors(WorkflowEvent."Function Name");
    END;

    PROCEDURE AddEventPredecessor@66(FunctionName@1001 : Code[128];PredecessorFunctionName@1002 : Code[128]);
    VAR
      WFEventResponseCombination@1000 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::"Event";
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowEventsToLibrary@3();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowEventPredecessorsToLibrary@70(EventFunctionName@1000 : Code[128]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowTableRelationsToLibrary@71();
    BEGIN
    END;

    PROCEDURE RunWorkflowOnAfterInsertIncomingDocumentCode@15() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterInsertIncomingDocument'));
    END;

    PROCEDURE RunWorkflowOnAfterReleaseIncomingDocCode@79() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReleaseIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocSuccessCode@80() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateDocFromIncomingDocSuccess'));
    END;

    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocFailCode@81() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterCreateDocFromIncomingDocFail'));
    END;

    PROCEDURE RunWorkflowOnAfterReadyForOCRIncomingDocCode@69() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterreadyforOCRIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterSendToOCRIncomingDocCode@82() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterSendToOCRIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterReceiveFromOCRIncomingDocCode@83() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReceiveFromOCRIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterReceiveFromDocExchIncomingDocCode@84() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReceiveFromDocExchIncomingDoc'));
    END;

    PROCEDURE RunWorkflowOnSendPurchaseDocForApprovalCode@16() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendPurchaseDocForApproval'));
    END;

    PROCEDURE RunWorkflowOnSendIncomingDocForApprovalCode@12() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendIncomingDocForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelIncomingDocApprovalRequestCode@160() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelIncomingDocApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnCancelPurchaseApprovalRequestCode@22() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelPurchaseApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnAfterReleasePurchaseDocCode@29() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReleasePurchaseDoc'));
    END;

    PROCEDURE RunWorkflowOnSendSalesDocForApprovalCode@17() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendSalesDocForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelSalesApprovalRequestCode@32() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelSalesApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnAfterReleaseSalesDocCode@4() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterReleaseSalesDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterPostPurchaseDocCode@19() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterPostPurchaseDoc'));
    END;

    PROCEDURE RunWorkflowOnAfterInsertGeneralJournalLineCode@20() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnAfterInsertGeneralJournalLine'));
    END;

    PROCEDURE RunWorkflowOnApproveApprovalRequestCode@21() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnApproveApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnDelegateApprovalRequestCode@23() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnDelegateApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnRejectApprovalRequestCode@24() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnRejectApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnSendOverdueNotificationsCode@27() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendOverdueNotifications'));
    END;

    PROCEDURE RunWorkflowOnCustomerCreditLimitExceededCode@35() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCustomerCreditLimitExceeded'));
    END;

    PROCEDURE RunWorkflowOnCustomerCreditLimitNotExceededCode@36() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCustomerCreditLimitNotExceeded'));
    END;

    PROCEDURE RunWorkflowOnSendCustomerForApprovalCode@34() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendCustomerForApproval'));
    END;

    PROCEDURE RunWorkflowOnSendVendorForApprovalCode@45() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendVendorForApproval'));
    END;

    PROCEDURE RunWorkflowOnSendItemForApprovalCode@48() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendItemForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelCustomerApprovalRequestCode@40() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelCustomerApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnCancelVendorApprovalRequestCode@62() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelVendorApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnCancelItemApprovalRequestCode@63() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelItemApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnSendGeneralJournalBatchForApprovalCode@51() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendGeneralJournalBatchForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode@161() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelGeneralJournalBatchApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnSendGeneralJournalLineForApprovalCode@52() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnSendGeneralJournalLineForApproval'));
    END;

    PROCEDURE RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode@47() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCancelGeneralJournalLineApprovalRequest'));
    END;

    PROCEDURE RunWorkflowOnGeneralJournalBatchBalancedCode@57() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnGeneralJournalBatchBalanced'));
    END;

    PROCEDURE RunWorkflowOnGeneralJournalBatchNotBalancedCode@58() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnGeneralJournalBatchNotBalanced'));
    END;

    PROCEDURE RunWorkflowOnBinaryFileAttachedCode@53() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnBinaryFileAttached'));
    END;

    PROCEDURE RunWorkflowOnCustomerChangedCode@50() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnCustomerChangedCode'));
    END;

    PROCEDURE RunWorkflowOnVendorChangedCode@49() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnVendorChangedCode'));
    END;

    PROCEDURE RunWorkflowOnItemChangedCode@54() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RunWorkflowOnItemChangedCode'));
    END;

    [EventSubscriber(Table,130,OnAfterInsertEvent)]
    PROCEDURE RunWorkflowOnAfterInsertIncomingDocument@2(VAR Rec@1000 : Record 130;RunTrigger@1001 : Boolean);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterInsertIncomingDocumentCode,Rec);
    END;

    [EventSubscriber(Codeunit,1535,OnSendPurchaseDocForApproval)]
    PROCEDURE RunWorkflowOnSendPurchaseDocForApproval@1(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendPurchaseDocForApprovalCode,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelPurchaseApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelPurchaseApprovalRequest@8(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelPurchaseApprovalRequestCode,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnSendIncomingDocForApproval)]
    PROCEDURE RunWorkflowOnSendIncomingDocForApproval@88(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendIncomingDocForApprovalCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelIncomingDocApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelIncomingDocApprovalRequest@89(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelIncomingDocApprovalRequestCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,415,OnAfterReleasePurchaseDoc)]
    PROCEDURE RunWorkflowOnAfterReleasePurchaseDoc@28(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReleasePurchaseDocCode,PurchaseHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnSendSalesDocForApproval)]
    PROCEDURE RunWorkflowOnSendSalesDocForApproval@18(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendSalesDocForApprovalCode,SalesHeader);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelSalesApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelSalesApprovalRequest@33(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelSalesApprovalRequestCode,SalesHeader);
    END;

    [EventSubscriber(Codeunit,414,OnAfterReleaseSalesDoc)]
    PROCEDURE RunWorkflowOnAfterReleaseSalesDoc@9(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReleaseSalesDocCode,SalesHeader);
    END;

    [EventSubscriber(Codeunit,132,OnAfterReleaseIncomingDoc)]
    PROCEDURE RunWorkflowOnAfterReleaseIncomingDoc@90(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReleaseIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,132,OnAfterCreateDocFromIncomingDocSuccess)]
    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocSuccess@77(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateDocFromIncomingDocSuccessCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,132,OnAfterCreateDocFromIncomingDocFail)]
    PROCEDURE RunWorkflowOnAfterCreateDocFromIncomingDocFail@78(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterCreateDocFromIncomingDocFailCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,133,OnAfterIncomingDocReadyForOCR)]
    PROCEDURE RunWorkflowOnAfterIncomingDocReadyForOCR@68(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReadyForOCRIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,133,OnAfterIncomingDocSentToOCR)]
    PROCEDURE RunWorkflowOnAfterIncomingDocSentToOCR@85(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterSendToOCRIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,133,OnAfterIncomingDocReceivedFromOCR)]
    PROCEDURE RunWorkflowOnAfterIncomingDocReceivedFromOCR@86(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReceiveFromOCRIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,1410,OnAfterIncomingDocReceivedFromDocExch)]
    PROCEDURE RunWorkflowOnAfterIncomingDocReceivedFromDocExch@87(VAR IncomingDocument@1001 : Record 130);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterReceiveFromDocExchIncomingDocCode,IncomingDocument);
    END;

    [EventSubscriber(Codeunit,90,OnAfterPostPurchaseDoc)]
    PROCEDURE RunWorkflowOnAfterPostPurchaseDoc@5(VAR PurchaseHeader@1000 : Record 38;VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    VAR
      PurchInvHeader@1006 : Record 122;
    BEGIN
      CASE PurchaseHeader."Document Type" OF
        PurchaseHeader."Document Type"::Order,PurchaseHeader."Document Type"::Invoice:
          BEGIN
            IF PurchInvHeader.GET(PurchInvHdrNo) THEN
              WorkflowManagement.HandleEvent(RunWorkflowOnAfterPostPurchaseDocCode,PurchInvHeader);
          END;
      END;
    END;

    [EventSubscriber(Table,81,OnAfterInsertEvent)]
    PROCEDURE RunWorkflowOnAfterInsertGeneralJournalLine@6(VAR Rec@1000 : Record 81;RunTrigger@1001 : Boolean);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnAfterInsertGeneralJournalLineCode,Rec);
    END;

    [EventSubscriber(Codeunit,1535,OnApproveApprovalRequest)]
    PROCEDURE RunWorkflowOnApproveApprovalRequest@7(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnApproveApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    [EventSubscriber(Codeunit,1535,OnDelegateApprovalRequest)]
    PROCEDURE RunWorkflowOnDelegateApprovalRequest@10(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnDelegateApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    [EventSubscriber(Codeunit,1535,OnRejectApprovalRequest)]
    PROCEDURE RunWorkflowOnRejectApprovalRequest@11(VAR ApprovalEntry@1000 : Record 454);
    BEGIN
      WorkflowManagement.HandleEventOnKnownWorkflowInstance(RunWorkflowOnRejectApprovalRequestCode,
        ApprovalEntry,ApprovalEntry."Workflow Step Instance ID");
    END;

    [EventSubscriber(Report,1509,OnSendOverdueNotifications)]
    PROCEDURE RunWorkflowOnSendOverdueNotifications@26();
    VAR
      ApprovalEntry@1002 : Record 454;
    BEGIN
      ApprovalEntry.INIT;
      WorkflowManagement.HandleEvent(RunWorkflowOnSendOverdueNotificationsCode,ApprovalEntry);
    END;

    [EventSubscriber(Table,36,OnCustomerCreditLimitExceeded)]
    PROCEDURE RunWorkflowOnCustomerCreditLimitExceeded@38(VAR Sender@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCustomerCreditLimitExceededCode,Sender);
    END;

    [EventSubscriber(Table,36,OnCustomerCreditLimitNotExceeded)]
    PROCEDURE RunWorkflowOnCustomerCreditLimitNotExceeded@37(VAR Sender@1000 : Record 36);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCustomerCreditLimitNotExceededCode,Sender);
    END;

    [EventSubscriber(Codeunit,1535,OnSendCustomerForApproval)]
    PROCEDURE RunWorkflowOnSendCustomerForApproval@39(Customer@1003 : Record 18);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendCustomerForApprovalCode,Customer);
    END;

    [EventSubscriber(Codeunit,1535,OnSendVendorForApproval)]
    PROCEDURE RunWorkflowOnSendVendorForApproval@59(Vendor@1003 : Record 23);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendVendorForApprovalCode,Vendor);
    END;

    [EventSubscriber(Codeunit,1535,OnSendItemForApproval)]
    PROCEDURE RunWorkflowOnSendItemForApproval@60(Item@1003 : Record 27);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendItemForApprovalCode,Item);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelCustomerApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelCustomerApprovalRequest@41(Customer@1003 : Record 18);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelCustomerApprovalRequestCode,Customer);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelVendorApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelVendorApprovalRequest@64(Vendor@1003 : Record 23);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelVendorApprovalRequestCode,Vendor);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelItemApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelItemApprovalRequest@65(Item@1003 : Record 27);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelItemApprovalRequestCode,Item);
    END;

    [EventSubscriber(Codeunit,1535,OnSendGeneralJournalBatchForApproval)]
    PROCEDURE RunWorkflowOnSendGeneralJournalBatchForApproval@56(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendGeneralJournalBatchForApprovalCode,GenJournalBatch);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelGeneralJournalBatchApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelGeneralJournalBatchApprovalRequest@55(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode,GenJournalBatch);
    END;

    [EventSubscriber(Codeunit,1535,OnSendGeneralJournalLineForApproval)]
    PROCEDURE RunWorkflowOnSendGeneralJournalLineForApproval@46(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnSendGeneralJournalLineForApprovalCode,GenJournalLine);
    END;

    [EventSubscriber(Codeunit,1535,OnCancelGeneralJournalLineApprovalRequest)]
    PROCEDURE RunWorkflowOnCancelGeneralJournalLineApprovalRequest@43(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode,GenJournalLine);
    END;

    [EventSubscriber(Table,232,OnGeneralJournalBatchBalanced)]
    PROCEDURE RunWorkflowOnGeneralJournalBatchBalanced@42(VAR Sender@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnGeneralJournalBatchBalancedCode,Sender);
    END;

    [EventSubscriber(Table,232,OnGeneralJournalBatchNotBalanced)]
    PROCEDURE RunWorkflowOnGeneralJournalBatchNotBalanced@44(VAR Sender@1000 : Record 232);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnGeneralJournalBatchNotBalancedCode,Sender);
    END;

    [EventSubscriber(Table,133,OnAttachBinaryFile)]
    PROCEDURE RunWorkflowOnBinaryFileAttached@25(VAR Sender@1000 : Record 133);
    BEGIN
      WorkflowManagement.HandleEvent(RunWorkflowOnBinaryFileAttachedCode,Sender);
    END;

    [EventSubscriber(Table,18,OnAfterModifyEvent)]
    PROCEDURE RunWorkflowOnCustomerChanged@30(VAR Rec@1000 : Record 18;VAR xRec@1001 : Record 18;RunTrigger@1002 : Boolean);
    BEGIN
      IF FORMAT(xRec) <> FORMAT(Rec) THEN
        WorkflowManagement.HandleEventWithxRec(RunWorkflowOnCustomerChangedCode,Rec,xRec);
    END;

    [EventSubscriber(Table,23,OnAfterModifyEvent)]
    PROCEDURE RunWorkflowOnVendorChanged@31(VAR Rec@1000 : Record 23;VAR xRec@1001 : Record 23;RunTrigger@1002 : Boolean);
    BEGIN
      IF FORMAT(xRec) <> FORMAT(Rec) THEN
        WorkflowManagement.HandleEventWithxRec(RunWorkflowOnVendorChangedCode,Rec,xRec);
    END;

    [EventSubscriber(Table,27,OnAfterModifyEvent)]
    PROCEDURE RunWorkflowOnItemChanged@61(VAR Rec@1000 : Record 27;VAR xRec@1001 : Record 27;RunTrigger@1002 : Boolean);
    BEGIN
      IF FORMAT(xRec) <> FORMAT(Rec) THEN
        WorkflowManagement.HandleEventWithxRec(RunWorkflowOnItemChangedCode,Rec,xRec);
    END;

    BEGIN
    END.
  }
}

