OBJECT Table 1237 Transformation Rule
{
  OBJECT-PROPERTIES
  {
    Date=15-09-15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    CaptionML=[DAN=Transformationsregel;
               ENU=Transformation Rule];
    LookupPageID=Page1237;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[DAN=Kode;
                                                              ENU=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text100       ;CaptionML=[DAN=Beskrivelse;
                                                              ENU=Description] }
    { 3   ;   ;Transformation Type ;Option        ;OnValidate=BEGIN
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::Replace,"Transformation Type"::"Regular Expression"]) THEN BEGIN
                                                                  "Find Value" := '';
                                                                  "Replace Value" := '';
                                                                END;
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::Substring]) THEN BEGIN
                                                                  "Start Position" := 0;
                                                                  Length := 0;
                                                                END;
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::"Date and Time Formatting","Transformation Type"::"Decimal Formatting"]) THEN BEGIN
                                                                  "Data Format" := '';
                                                                  "Data Formatting Culture" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[DAN=Transformationstype;
                                                              ENU=Transformation Type];
                                                   OptionCaptionML=[DAN=Store bogstaver,Små bogstaver,Alle ord med stort begyndelsesbogstav,Trim,Delstreng,Erstat,Søgemønster,Fjern ikke-alfanumeriske tegn,Dato- og klokkeslætsformatering,Decimalformatering;
                                                                    ENU=Uppercase,Lowercase,Title Case,Trim,Substring,Replace,Regular Expression,Remove Non-Alphanumeric Characters,Date and Time Formatting,Decimal Formatting];
                                                   OptionString=Uppercase,Lowercase,Title Case,Trim,Substring,Replace,Regular Expression,Remove Non-Alphanumeric Characters,Date and Time Formatting,Decimal Formatting }
    { 10  ;   ;Find Value          ;Text250       ;OnValidate=BEGIN
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::Replace,"Transformation Type"::"Regular Expression"]) THEN
                                                                  TESTFIELD("Find Value",'');
                                                              END;

                                                   CaptionML=[DAN=Find værdi;
                                                              ENU=Find Value] }
    { 11  ;   ;Replace Value       ;Text250       ;OnValidate=BEGIN
                                                                IF NOT ("Transformation Type" IN ["Transformation Type"::Replace,"Transformation Type"::"Regular Expression"]) THEN
                                                                  TESTFIELD("Replace Value",'');
                                                              END;

                                                   CaptionML=[DAN=Erstat værdi;
                                                              ENU=Replace Value] }
    { 15  ;   ;Start Position      ;Integer       ;OnValidate=BEGIN
                                                                IF "Start Position" <> 0 THEN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);

                                                                IF "Transformation Type" = "Transformation Type"::Substring THEN
                                                                  IF "Start Position" <= 0 THEN
                                                                    ERROR(MustBeGreaterThanZeroErr);
                                                              END;

                                                   CaptionML=[DAN=Startplacering;
                                                              ENU=Start Position];
                                                   BlankZero=Yes }
    { 16  ;   ;Length              ;Integer       ;OnValidate=BEGIN
                                                                IF Length <> 0 THEN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::Substring);

                                                                IF "Transformation Type" = "Transformation Type"::Substring THEN
                                                                  IF Length < 0 THEN
                                                                    ERROR(MustBeGreaterThanZeroErr);
                                                              END;

                                                   CaptionML=[DAN=Længde;
                                                              ENU=Length];
                                                   BlankZero=Yes }
    { 18  ;   ;Data Format         ;Text100       ;OnValidate=BEGIN
                                                                IF "Data Format" <> '' THEN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::"Date and Time Formatting");
                                                              END;

                                                   CaptionML=[DAN=Dataformat;
                                                              ENU=Data Format] }
    { 20  ;   ;Data Formatting Culture;Text10     ;OnValidate=BEGIN
                                                                IF "Data Format" <> '' THEN
                                                                  TESTFIELD("Transformation Type","Transformation Type"::"Date and Time Formatting");
                                                              END;

                                                   CaptionML=[DAN=Dataformateringskultur;
                                                              ENU=Data Formatting Culture] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      MustBeGreaterThanZeroErr@1000 : TextConst 'DAN=Den angivne værdi skal være større end nul.;ENU=The Value entered must be greater than zero.';
      UPPERCASETxt@1001 : TextConst '@@@=Assigned to Transformation.Code field for Upper case;DAN=STORE BOGSTAVER;ENU=UPPERCASE';
      UpperCaseDescTxt@1007 : TextConst 'DAN=Tekst med store bogstaver;ENU=Upper Case Text';
      LOWERCASETxt@1002 : TextConst '@@@=Assigned to Transformation.Code field for Lower case;DAN=SMÅ BOGSTAVER;ENU=LOWERCASE';
      LowerCaseDescTxt@1008 : TextConst 'DAN=Tekst med små bogstaver;ENU=Lower Case Text';
      TITLECASETxt@1003 : TextConst '@@@=Assigned to Transformation.Code field for Title case;DAN=ALLE ORD MED STORT;ENU=TITLECASE';
      TitleCaseDescTxt@1009 : TextConst 'DAN=Tekst, hvor alle ord skrives med store bogstaver;ENU=Title Case Text';
      TRIMTxt@1004 : TextConst '@@@=Assigned to Transformation.Code field for Trim;DAN=TRIM;ENU=TRIM';
      TrimDescTxt@1010 : TextConst 'DAN=Trim-tekst;ENU=Trim Text';
      FOURTH_TO_SIXTH_CHARTxt@1005 : TextConst '@@@=Assigned to Transformation.Code field for getting the 4th to 6th characters in a string;DAN=TEGN_FIRE_TIL_SEKS;ENU=FOURTH_TO_SIXTH_CHAR';
      FourthToSixthCharactersDescTxt@1011 : TextConst 'DAN=Tekst med fjerde til sjette tegn;ENU=Fourth to Sixth Characters Text';
      YYYYMMDDDateTxt@1014 : TextConst '@@@=Assigned to Transformation.Code field for converting dates from yyyyMMdd format;DAN=ÅÅÅÅMMDD_DATO;ENU=YYYYMMDD_DATE';
      YYYYMMDDDateDescTxt@1013 : TextConst 'DAN=Tekst med datoformatet ååååMMdd;ENU=yyyyMMdd Date Text';
      ALPHANUMERIC_ONLYTxt@1006 : TextConst '@@@=Assigned to Transformation.Code field for getting only the Alphanumeric characters in a string;DAN=KUN_ALFANUMERISK;ENU=ALPHANUMERIC_ONLY';
      AlphaNumericDescTxt@1012 : TextConst 'DAN=Kun alfanumerisk tekst;ENU=Alphanumeric Text Only';
      DKNUMBERFORMATTxt@1015 : TextConst '@@@=Assigned to Transformation.Code field for getting decimal formatting rule for Danish numbers;DAN=DK_DECIMALFORMAT;ENU=DK_DECIMAL_FORMAT';
      DKNUMBERFORMATDescTxt@1016 : TextConst 'DAN=Dansk decimalformat;ENU=Danish Decimal Format';
      USDATEFORMATTxt@1017 : TextConst '@@@=Assigned to Transformation.Code field for getting date formatting rule from U.S. dates;DAN=US_DATE_FORMAT;ENU=US_DATE_FORMAT';
      USDATEFORMATDescTxt@1018 : TextConst 'DAN=Amerikansk datoformat;ENU=U.S. Date Format';

    PROCEDURE CreateDefaultTransformations@3();
    BEGIN
      InsertRec(UPPERCASETxt,UpperCaseDescTxt,"Transformation Type"::Uppercase,0,0,'','');
      InsertRec(LOWERCASETxt,LowerCaseDescTxt,"Transformation Type"::Lowercase,0,0,'','');
      InsertRec(TITLECASETxt,TitleCaseDescTxt,"Transformation Type"::"Title Case",0,0,'','');
      InsertRec(TRIMTxt,TrimDescTxt,"Transformation Type"::Trim,0,0,'','');
      InsertRec(FOURTH_TO_SIXTH_CHARTxt,FourthToSixthCharactersDescTxt,"Transformation Type"::Substring,4,3,'','');
      InsertRec(YYYYMMDDDateTxt,YYYYMMDDDateDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'yyyyMMdd','');
      InsertRec(ALPHANUMERIC_ONLYTxt,AlphaNumericDescTxt,"Transformation Type"::"Remove Non-Alphanumeric Characters",0,0,'','');
      InsertRec(DKNUMBERFORMATTxt,DKNUMBERFORMATDescTxt,"Transformation Type"::"Decimal Formatting",0,0,'','da-DK');
      InsertRec(USDATEFORMATTxt,USDATEFORMATDescTxt,"Transformation Type"::"Date and Time Formatting",0,0,'','en-US');
    END;

    LOCAL PROCEDURE InsertRec@8(NewCode@1000 : Code[20];NewDescription@1001 : Text[100];NewTransformationType@1002 : Option;NewStartPosition@1003 : Integer;NewLength@1004 : Integer;NewDataFormat@1006 : Text[100];NewDataFormattingCulture@1007 : Text[10]);
    VAR
      TransformationRule@1005 : Record 1237;
    BEGIN
      WITH TransformationRule DO BEGIN
        INIT;
        VALIDATE(Code,NewCode);
        VALIDATE(Description,NewDescription);
        VALIDATE("Transformation Type",NewTransformationType);
        VALIDATE("Start Position",NewStartPosition);
        VALIDATE(Length,NewLength);
        VALIDATE("Data Format",NewDataFormat);
        VALIDATE("Data Formatting Culture",NewDataFormattingCulture);
        IF INSERT(TRUE) THEN;
      END;
    END;

    PROCEDURE TransformText@5(OldValue@1001 : Text) : Text;
    VAR
      NewValue@1002 : Text;
    BEGIN
      NewValue := OldValue;

      CASE "Transformation Type" OF
        "Transformation Type"::Uppercase:
          NewValue := UPPERCASE(OldValue);
        "Transformation Type"::Lowercase:
          NewValue := LOWERCASE(OldValue);
        "Transformation Type"::"Title Case":
          NewValue := TextToTitleCase(OldValue);
        "Transformation Type"::Trim:
          NewValue := DELCHR(OldValue,'<>');
        "Transformation Type"::Substring:
          NewValue := Substring(OldValue);
        "Transformation Type"::Replace:
          NewValue := StringReplace(OldValue,"Find Value","Replace Value");
        "Transformation Type"::"Regular Expression":
          NewValue := RegularExpression(OldValue,"Find Value","Replace Value");
        "Transformation Type"::"Remove Non-Alphanumeric Characters":
          NewValue := RemoveNonAplhaNumericCharacters(OldValue);
        "Transformation Type"::"Date and Time Formatting":
          NewValue := DateTimeFormatting(OldValue);
        "Transformation Type"::"Decimal Formatting":
          NewValue := DecimalFormatting(OldValue);
      END;

      EXIT(NewValue);
    END;

    LOCAL PROCEDURE TextToTitleCase@17(OldValue@1001 : Text) : Text;
    VAR
      CultureInfo@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo("Data Formatting Culture");
      EXIT(CultureInfo.TextInfo.ToTitleCase(OldValue));
    END;

    LOCAL PROCEDURE StringReplace@4(StringToReplace@1000 : Text;OldValue@1001 : Text;NewValue@1002 : Text) : Text;
    VAR
      DotNetString@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      NewString@1004 : Text;
    BEGIN
      DotNetString := StringToReplace;
      NewString := DotNetString.Replace(OldValue,NewValue);
      EXIT(NewString);
    END;

    LOCAL PROCEDURE RegularExpression@2(StringToReplace@1000 : Text;Pattern@1001 : Text;NewValue@1002 : Text) : Text;
    VAR
      Regex@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegexOptions@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.RegexOptions";
      NewString@1004 : Text;
    BEGIN
      Regex := Regex.Regex(Pattern,RegexOptions.IgnoreCase);
      NewString := Regex.Replace(StringToReplace,NewValue);
      EXIT(NewString);
    END;

    LOCAL PROCEDURE RemoveNonAplhaNumericCharacters@19(OldValue@1003 : Text) : Text;
    VAR
      DotNetChar@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
      NewValue@1001 : Text;
      I@1000 : Integer;
    BEGIN
      NewValue := '';
      FOR I := 1 TO STRLEN(OldValue) DO BEGIN
        IF DotNetChar.IsLetterOrDigit(OldValue[I]) THEN
          NewValue += FORMAT(OldValue[I]);
      END;

      EXIT(NewValue);
    END;

    LOCAL PROCEDURE DateTimeFormatting@20(OldValue@1001 : Text) : Text;
    VAR
      DotNetDateTime@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      CultureInfo@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDateTimeStyles@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeStyles";
      NewValue@1003 : Text;
    BEGIN
      NewValue := OldValue;

      DotNetDateTime := DotNetDateTime.DateTime(1);
      IF "Data Formatting Culture" = '' THEN BEGIN
        CultureInfo := CultureInfo.InvariantCulture;
        IF NOT DotNetDateTime.TryParseExact(
             OldValue,
             "Data Format",
             CultureInfo,
             DotNetDateTimeStyles.None,
             DotNetDateTime)
        THEN
          EXIT(NewValue);
      END ELSE BEGIN
        CultureInfo := CultureInfo.GetCultureInfo("Data Formatting Culture");
        IF NOT DotNetDateTime.TryParse(
             OldValue,
             CultureInfo,
             DotNetDateTimeStyles.None,
             DotNetDateTime)
        THEN
          EXIT(NewValue);
      END;

      NewValue := DotNetDateTime.ToString('yyyy-MM-dd',CultureInfo);
      EXIT(NewValue);
    END;

    LOCAL PROCEDURE DecimalFormatting@14(OldValue@1001 : Text) : Text;
    VAR
      TypeHelper@1006 : Codeunit 10;
      NewDecimalVariant@1000 : Variant;
      NewValue@1003 : Text;
      DummyDecimal@1007 : Decimal;
    BEGIN
      NewValue := OldValue;
      NewDecimalVariant := DummyDecimal;
      TypeHelper.Evaluate(NewDecimalVariant,OldValue,'',"Data Formatting Culture");

      NewValue := FORMAT(NewDecimalVariant,0,9);
      EXIT(NewValue);
    END;

    LOCAL PROCEDURE Substring@7(OldValue@1000 : Text) : Text;
    VAR
      StartPosition@1002 : Integer;
      NewLength@1003 : Integer;
    BEGIN
      StartPosition := "Start Position";
      NewLength := Length;

      IF StartPosition = 0 THEN
        StartPosition := 1;

      IF Length = 0 THEN
        NewLength := STRLEN(OldValue);

      EXIT(COPYSTR(OldValue,StartPosition,NewLength));
    END;

    PROCEDURE GetFourthToSixthSubstringCode@6() : Code[20];
    BEGIN
      EXIT(FOURTH_TO_SIXTH_CHARTxt);
    END;

    PROCEDURE GetUSDateFormatCode@1() : Code[20];
    BEGIN
      EXIT(USDATEFORMATTxt);
    END;

    PROCEDURE GetUppercaseCode@10() : Code[20];
    BEGIN
      EXIT(UPPERCASETxt);
    END;

    PROCEDURE GetLowercaseCode@9() : Code[20];
    BEGIN
      EXIT(LOWERCASETxt);
    END;

    PROCEDURE GetTitlecaseCode@12() : Code[20];
    BEGIN
      EXIT(TITLECASETxt);
    END;

    PROCEDURE GetTrimCode@11() : Code[20];
    BEGIN
      EXIT(TRIMTxt);
    END;

    PROCEDURE GetAlphanumericCode@13() : Code[20];
    BEGIN
      EXIT(ALPHANUMERIC_ONLYTxt);
    END;

    PROCEDURE GetDanishDecimalFormatCode@15() : Code[20];
    BEGIN
      EXIT(DKNUMBERFORMATTxt);
    END;

    PROCEDURE GetYYYYMMDDCode@16() : Code[20];
    BEGIN
      EXIT(YYYYMMDDDateTxt);
    END;

    BEGIN
    END.
  }
}

