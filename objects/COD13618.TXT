OBJECT Codeunit 13618 Sales-Post + XML File
{
  OBJECT-PROPERTIES
  {
    Date=15-09-15;
    Time=12:00:00;
    Version List=NAVDK9.00;
  }
  PROPERTIES
  {
    TableNo=36;
    Permissions=TableData 112=rimd,
                TableData 114=rimd;
    OnRun=BEGIN
            SalesHeader.COPY(Rec);
            Code;
            Rec := SalesHeader;
          END;

  }
  CODE
  {
    VAR
      HowToPostQst@1000 : TextConst 'DAN=&Lever,&Fakturer,Lever &og fakturer;ENU=&Ship,&Invoice,Ship &and Invoice';
      PostAndFileQst@1001 : TextConst 'DAN=Skal %1 bogføres og arkiveres?;ENU=Do you want to post and file the %1?';
      HowToReceiveQst@1002 : TextConst 'DAN=&Modtag,&Fakturer,Modtag &og fakturer;ENU=&Receive,&Invoice,Receive &and Invoice';
      SalesHeader@1003 : Record 36;
      SalesInvHeader@1005 : Record 112;
      SalesCrMemoHeader@1006 : Record 114;
      Selection@1010 : Integer;
      NoEANNoErr@1060000 : TextConst 'DAN=Der er ingen EAN-numre angivet. Filen kan ikke overføres.;ENU=There are no EAN No. specificed. The file cannot be uploaded.';

    LOCAL PROCEDURE Code@2();
    VAR
      SalesSetup@1001 : Record 311;
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      WITH SalesHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              Selection := STRMENU(HowToPostQst,3);
              IF Selection = 0 THEN
                EXIT;
              Ship := Selection IN [1,3];
              Invoice := Selection IN [2,3];
            END;
          "Document Type"::"Return Order":
            BEGIN
              Selection := STRMENU(HowToReceiveQst,3);
              IF Selection = 0 THEN
                EXIT;
              Receive := Selection IN [1,3];
              Invoice := Selection IN [2,3];
            END
          ELSE
            IF NOT
               CONFIRM(PostAndFileQst,FALSE,"Document Type")
            THEN
              EXIT;
        END;

        "Print Posted Documents" := TRUE;
        SalesSetup.GET;
        IF SalesSetup."Post & Print with Job Queue" THEN
          SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
        ELSE BEGIN
          SalesSetup.VerifyAndSetOIOUBLPathSetup("Document Type");
          CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
          COMMIT;
          SaveOIOXML(SalesHeader);
        END;
      END;
    END;

    PROCEDURE SaveOIOXML@3(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WITH SalesHeader DO BEGIN
        IF "EAN No." = '' THEN
          ERROR(NoEANNoErr);
        CASE "Document Type" OF
          "Document Type"::Order:
            SaveInvoiceOIOXML(SalesInvHeader."No.");
          "Document Type"::Invoice:
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesInvHeader."No." := "No."
              ELSE
                SalesInvHeader."No." := "Last Posting No.";
              SaveInvoiceOIOXML(SalesInvHeader."No.");
            END;
          "Document Type"::"Return Order":
            IF Invoice THEN
              SaveCreditmemoOIOXML(SalesCrMemoHeader."No.");
          "Document Type"::"Credit Memo":
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesCrMemoHeader."No." := "No."
              ELSE
                SalesCrMemoHeader."No." := "Last Posting No.";
              SaveCreditmemoOIOXML(SalesCrMemoHeader."No.");
            END;
        END;
      END;
      COMMIT;
    END;

    LOCAL PROCEDURE SaveInvoiceOIOXML@1060000(DocumentNo@1060007 : Code[20]);
    VAR
      OIOUBLExportSalesInvoice@1060000 : Codeunit 13609;
    BEGIN
      IF SalesInvHeader.GET(DocumentNo) THEN
        OIOUBLExportSalesInvoice.ExportXML(SalesInvHeader);
    END;

    LOCAL PROCEDURE SaveCreditmemoOIOXML@1060001(DocumentNo@1060007 : Code[20]);
    VAR
      OIOUBLExportSalesCrMemo@1060000 : Codeunit 13610;
    BEGIN
      IF SalesCrMemoHeader.GET(DocumentNo) THEN
        OIOUBLExportSalesCrMemo.ExportXML(SalesCrMemoHeader);
    END;

    BEGIN
    END.
  }
}

